// Copyright 2024 Nokia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package schema;

option go_package = ".;schema_server";

service SchemaServer {
  // returns schema name, vendor, version, and files path(s)
  rpc GetSchemaDetails(GetSchemaDetailsRequest)
      returns (GetSchemaDetailsResponse);
  // lists known schemas with name, vendor, version and status
  rpc ListSchema(ListSchemaRequest) returns (ListSchemaResponse);
  // returns the schema of an item identified by a gNMI-like path
  rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse);
  // creates a schema
  rpc CreateSchema(CreateSchemaRequest) returns (CreateSchemaResponse);
  // trigger schema reload
  rpc ReloadSchema(ReloadSchemaRequest) returns (ReloadSchemaResponse);
  // delete a schema
  rpc DeleteSchema(DeleteSchemaRequest) returns (DeleteSchemaResponse);
  // client stream RPC to upload yang files to the server:
  // - uses CreateSchema as a first message
  // - then N intermediate UploadSchemaFile, initial, bytes, hash for each file
  // - and ends with an UploadSchemaFinalize{}
  rpc UploadSchema(stream UploadSchemaRequest) returns (UploadSchemaResponse);
  // ToPath converts a list of items into a schema.proto.Path
  rpc ToPath(ToPathRequest) returns (ToPathResponse);
  // ExpandPath returns a list of sub paths given a single path
  rpc ExpandPath(ExpandPathRequest) returns (ExpandPathResponse);
  // GetSchemaElements returns the schema of each path element
  rpc GetSchemaElements(GetSchemaRequest) returns (stream GetSchemaResponse);
}

message Schema {
  // string type = 1;
  string       name    = 2;
  string       vendor  = 3;
  string       version = 4;
  SchemaStatus status  = 5;
}

// RPC messages
message GetSchemaDetailsRequest { Schema schema = 1; }

message GetSchemaDetailsResponse {
  Schema          schema    = 1; // with status
  repeated string file      = 2;
  repeated string directory = 3;
  repeated string exclude   = 4;
}

message ListSchemaRequest {}
message ListSchemaResponse { repeated Schema schema = 1; }

message GetSchemaRequest {
  Path   path             = 1;
  Schema schema           = 2;
  bool   validate_keys    = 3; // TODO
  bool   with_description = 4; // TODO
}

message GetSchemaResponse { SchemaElem schema = 1; }

message SchemaElem {
  oneof schema {
    ContainerSchema container = 1;
    LeafSchema      field     = 2;
    LeafListSchema  leaflist  = 3;
  }
}

message CreateSchemaRequest {
  Schema          schema    = 1; // status unset
  repeated string file      = 2;
  repeated string directory = 3;
  repeated string exclude   = 4;
}

message CreateSchemaResponse {
  Schema schema = 1; // status should be intializing
}

message ReloadSchemaRequest { Schema schema = 1; }

message ReloadSchemaResponse {}

message DeleteSchemaRequest { Schema schema = 1; }

message DeleteSchemaResponse {}

message UploadSchemaRequest {
  oneof upload {
    CreateSchemaRequest  create_schema = 1;
    UploadSchemaFile     schema_file   = 2;
    UploadSchemaFinalize finalize      = 3;
  }
}

message UploadSchemaFile {
  enum FileType {
    MODULE     = 0;
    DEPENDENCY = 1;
  }
  string   file_name = 1; // file name with path
  FileType file_type = 2; // file
  bytes    contents  = 3; // raw bytes to be appended to the file
  Hash     hash      = 4; // if present marks the last message for that file
}

message ToPathRequest {
  repeated string path_element = 1;
  Schema          schema       = 2;
}
message ToPathResponse { Path path = 1; }

message ExpandPathRequest {
  Path     path      = 1;
  Schema   schema    = 2;
  DataType data_type = 3;
  bool     xpath     = 4;
}
message ExpandPathResponse {
  repeated Path   path  = 1;
  repeated string xpath = 2;
}

message Hash {
  enum HashMethod {
    UNSPECIFIED = 0; // Error
    MD5         = 1;
    SHA256      = 2;
    SHA512      = 3;
  }
  HashMethod method = 1;
  bytes      hash   = 2;
}

message UploadSchemaFinalize {}

message UploadSchemaResponse {}

// sub messages
message ContainerSchema {
  string name                                = 1;
  string description                         = 2;
  string owner                               = 3;
  string namespace                           = 4;
  string prefix                              = 5;

  repeated LeafSchema     keys               = 6;
  repeated LeafSchema     fields             = 7;
  repeated LeafListSchema leaflists          = 8;
  repeated string         children           = 9;
  repeated MandatoryChild mandatory_children = 10;

  repeated MustStatement must_statements     = 11;

  string module_name                         = 12;

  uint64          max_elements               = 13;
  uint64          min_elements               = 14;
  repeated string childs_with_defaults       = 15;

  bool            is_presence                = 20;
  bool            is_state                   = 21;
  bool            is_user_ordered            = 22;
  repeated string if_feature                 = 23;

  ChoiceInfo choice_info                     = 30;
}

message MandatoryChild {
  string name     = 1;
  bool   is_state = 2;
}

message LeafListSchema {
  string name                            = 1;
  string description                     = 2;
  string owner                           = 3;
  string namespace                       = 4;
  string prefix                          = 5;

  SchemaLeafType type                    = 6;
  bool           encrypted               = 7;

  string                 module_name     = 8;
  string                 units           = 9;
  repeated MustStatement must_statements = 11;
  repeated string        defaults        = 12;
  uint64                 max_elements    = 13;
  uint64                 min_elements    = 14;

  bool            is_state               = 21;
  bool            is_user_ordered        = 22;
  repeated string if_feature             = 23;
}

message LeafSchema {
  string name                            = 1;
  string description                     = 2;
  string owner                           = 3;
  string namespace                       = 4;
  string         prefix                  = 5;
  SchemaLeafType type                    = 6;
  bool           encrypted               = 7;

  bool   is_mandatory                    = 8;
  string units                           = 9;

  string module_name                     = 10;

  repeated MustStatement must_statements = 11;
  string default                         = 12;

  bool            is_state               = 21;
  repeated string if_feature             = 23;

  repeated string reference              = 25;
}

message SchemaLeafType {
  string                    type                = 1;
  repeated SchemaMinMaxType range               = 2;
  repeated SchemaMinMaxType length              = 3;
  repeated string           enum_names          = 4;
  string                    units               = 5;
  string                    type_name           = 6;
  string                    leafref             = 7;
  // optional_instance defines for a leafref if the referenced leaf needs to
  // exist or not.
  bool                    optional_instance     = 8;
  repeated SchemaPattern  patterns              = 9;
  repeated SchemaLeafType union_types           = 10;
  map<string, string>     identity_prefixes_map = 11;
  map<string, string>     module_prefix_map     = 12;
  SchemaLeafType          leafref_target_type   = 13;
  repeated Bit            bits                  = 14;
}

message MustStatement {
  string statement = 1;
  string error     = 2;
}

message PathElem {
  // The name of the element in the path.
  string name             = 1;
  // Map of key (attribute) name to value.
  map<string, string> key = 2;
}

message Path {
  string            origin = 2;
  repeated PathElem elem   = 3;
  string            target = 4;
}

message SchemaPattern {
  string pattern  = 1;
  bool   inverted = 2;
}

message SchemaMinMaxType {
  Number min = 1;
  Number max = 2;
}

message Number {
  uint64 value    = 1;
  bool   negative = 2;
}

message Bit {
  string name     = 1;
  // https://datatracker.ietf.org/doc/html/rfc7950#section-9.7.4.2
  // max is 4294967295 == 2^32-1 -> 32 bit uint
  uint32 position = 2;
}

enum SchemaStatus {
  OK           = 0; // all good
  RELOADING    = 1; // reloading YANG, should be locked
  INITIALIZING = 2; // initial state after creation
  FAILED       = 3; // chema files parsing failed, yang load failed
}

enum DataType {
  ALL    = 0;
  CONFIG = 1;
  STATE  = 2;
}

message ChoiceInfo {
  // If the schema object (container, field, leaf-list)
  // is a case substatement
  // this attribute will hold
  // the choice statement name
  map<string, ChoiceInfoChoice> choice = 1;
}

message ChoiceInfoChoice { map<string, ChoiceCase> case = 1; }

message ChoiceCase { repeated string elements = 1; }