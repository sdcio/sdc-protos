// Copyright 2024 Nokia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: data.proto

package schema_server

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Format int32

const (
	Format_Intent_Format_JSON      Format = 0
	Format_Intent_Format_JSON_IETF Format = 1
	Format_Intent_Format_XML       Format = 2
	Format_Intent_Format_PROTO     Format = 3
)

// Enum value maps for Format.
var (
	Format_name = map[int32]string{
		0: "Intent_Format_JSON",
		1: "Intent_Format_JSON_IETF",
		2: "Intent_Format_XML",
		3: "Intent_Format_PROTO",
	}
	Format_value = map[string]int32{
		"Intent_Format_JSON":      0,
		"Intent_Format_JSON_IETF": 1,
		"Intent_Format_XML":       2,
		"Intent_Format_PROTO":     3,
	}
)

func (x Format) Enum() *Format {
	p := new(Format)
	*p = x
	return p
}

func (x Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Format) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[0].Descriptor()
}

func (Format) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[0]
}

func (x Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Format.Descriptor instead.
func (Format) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0}
}

type DeviationEvent int32

const (
	DeviationEvent_DE_UNKNOWN DeviationEvent = 0
	DeviationEvent_START      DeviationEvent = 1
	DeviationEvent_END        DeviationEvent = 2
	DeviationEvent_UPDATE     DeviationEvent = 3
	DeviationEvent_CLEAR      DeviationEvent = 4
)

// Enum value maps for DeviationEvent.
var (
	DeviationEvent_name = map[int32]string{
		0: "DE_UNKNOWN",
		1: "START",
		2: "END",
		3: "UPDATE",
		4: "CLEAR",
	}
	DeviationEvent_value = map[string]int32{
		"DE_UNKNOWN": 0,
		"START":      1,
		"END":        2,
		"UPDATE":     3,
		"CLEAR":      4,
	}
)

func (x DeviationEvent) Enum() *DeviationEvent {
	p := new(DeviationEvent)
	*p = x
	return p
}

func (x DeviationEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviationEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[1].Descriptor()
}

func (DeviationEvent) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[1]
}

func (x DeviationEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviationEvent.Descriptor instead.
func (DeviationEvent) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{1}
}

type DeviationReason int32

const (
	DeviationReason_DR_UNKNOWN    DeviationReason = 0
	DeviationReason_UNHANDLED     DeviationReason = 1
	DeviationReason_NOT_APPLIED   DeviationReason = 2
	DeviationReason_OVERRULED     DeviationReason = 3
	DeviationReason_INTENT_EXISTS DeviationReason = 4
)

// Enum value maps for DeviationReason.
var (
	DeviationReason_name = map[int32]string{
		0: "DR_UNKNOWN",
		1: "UNHANDLED",
		2: "NOT_APPLIED",
		3: "OVERRULED",
		4: "INTENT_EXISTS",
	}
	DeviationReason_value = map[string]int32{
		"DR_UNKNOWN":    0,
		"UNHANDLED":     1,
		"NOT_APPLIED":   2,
		"OVERRULED":     3,
		"INTENT_EXISTS": 4,
	}
)

func (x DeviationReason) Enum() *DeviationReason {
	p := new(DeviationReason)
	*p = x
	return p
}

func (x DeviationReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviationReason) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[2].Descriptor()
}

func (DeviationReason) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[2]
}

func (x DeviationReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviationReason.Descriptor instead.
func (DeviationReason) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{2}
}

// GetDataRequest encoding
type Encoding int32

const (
	Encoding_STRING    Encoding = 0
	Encoding_JSON      Encoding = 1
	Encoding_JSON_IETF Encoding = 2
	Encoding_PROTO     Encoding = 3
)

// Enum value maps for Encoding.
var (
	Encoding_name = map[int32]string{
		0: "STRING",
		1: "JSON",
		2: "JSON_IETF",
		3: "PROTO",
	}
	Encoding_value = map[string]int32{
		"STRING":    0,
		"JSON":      1,
		"JSON_IETF": 2,
		"PROTO":     3,
	}
)

func (x Encoding) Enum() *Encoding {
	p := new(Encoding)
	*p = x
	return p
}

func (x Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[3].Descriptor()
}

func (Encoding) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[3]
}

func (x Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Encoding.Descriptor instead.
func (Encoding) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3}
}

type TargetStatus int32

const (
	TargetStatus_UNKNOWN       TargetStatus = 0
	TargetStatus_CONNECTED     TargetStatus = 1
	TargetStatus_NOT_CONNECTED TargetStatus = 2
)

// Enum value maps for TargetStatus.
var (
	TargetStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "CONNECTED",
		2: "NOT_CONNECTED",
	}
	TargetStatus_value = map[string]int32{
		"UNKNOWN":       0,
		"CONNECTED":     1,
		"NOT_CONNECTED": 2,
	}
)

func (x TargetStatus) Enum() *TargetStatus {
	p := new(TargetStatus)
	*p = x
	return p
}

func (x TargetStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[4].Descriptor()
}

func (TargetStatus) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[4]
}

func (x TargetStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TargetStatus.Descriptor instead.
func (TargetStatus) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4}
}

type CommitCandidate int32

const (
	CommitCandidate_COMMIT_CANDIDATE CommitCandidate = 0
	CommitCandidate_COMMIT_RUNNING   CommitCandidate = 1
)

// Enum value maps for CommitCandidate.
var (
	CommitCandidate_name = map[int32]string{
		0: "COMMIT_CANDIDATE",
		1: "COMMIT_RUNNING",
	}
	CommitCandidate_value = map[string]int32{
		"COMMIT_CANDIDATE": 0,
		"COMMIT_RUNNING":   1,
	}
)

func (x CommitCandidate) Enum() *CommitCandidate {
	p := new(CommitCandidate)
	*p = x
	return p
}

func (x CommitCandidate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommitCandidate) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[5].Descriptor()
}

func (CommitCandidate) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[5]
}

func (x CommitCandidate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommitCandidate.Descriptor instead.
func (CommitCandidate) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5}
}

type SyncMode int32

const (
	SyncMode_SM_ON_CHANGE SyncMode = 0
	SyncMode_SM_SAMPLE    SyncMode = 1
	SyncMode_SM_ONCE      SyncMode = 2
	SyncMode_SM_GET       SyncMode = 3
)

// Enum value maps for SyncMode.
var (
	SyncMode_name = map[int32]string{
		0: "SM_ON_CHANGE",
		1: "SM_SAMPLE",
		2: "SM_ONCE",
		3: "SM_GET",
	}
	SyncMode_value = map[string]int32{
		"SM_ON_CHANGE": 0,
		"SM_SAMPLE":    1,
		"SM_ONCE":      2,
		"SM_GET":       3,
	}
)

func (x SyncMode) Enum() *SyncMode {
	p := new(SyncMode)
	*p = x
	return p
}

func (x SyncMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncMode) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[6].Descriptor()
}

func (SyncMode) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[6]
}

func (x SyncMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncMode.Descriptor instead.
func (SyncMode) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{6}
}

// The operation that was associated with the schema.Path specified.
type UpdateResult_Operation int32

const (
	UpdateResult_INVALID UpdateResult_Operation = 0
	UpdateResult_DELETE  UpdateResult_Operation = 1 // The result relates to a delete of  schema.Path.
	UpdateResult_REPLACE UpdateResult_Operation = 2 // The result relates to a replace of schema.Path.
	UpdateResult_UPDATE  UpdateResult_Operation = 3 // The result relates to an update of schema.Path.
)

// Enum value maps for UpdateResult_Operation.
var (
	UpdateResult_Operation_name = map[int32]string{
		0: "INVALID",
		1: "DELETE",
		2: "REPLACE",
		3: "UPDATE",
	}
	UpdateResult_Operation_value = map[string]int32{
		"INVALID": 0,
		"DELETE":  1,
		"REPLACE": 2,
		"UPDATE":  3,
	}
)

func (x UpdateResult_Operation) Enum() *UpdateResult_Operation {
	p := new(UpdateResult_Operation)
	*p = x
	return p
}

func (x UpdateResult_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateResult_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[7].Descriptor()
}

func (UpdateResult_Operation) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[7]
}

func (x UpdateResult_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateResult_Operation.Descriptor instead.
func (UpdateResult_Operation) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{30, 0}
}

// messages
type GetDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// data store name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// data store type
	Datastore *DataStore `protobuf:"bytes,2,opt,name=datastore,proto3" json:"datastore,omitempty"`
	// path list
	Path []*Path `protobuf:"bytes,3,rep,name=path,proto3" json:"path,omitempty"`
	// dataType config, state
	DataType DataType `protobuf:"varint,4,opt,name=data_type,json=dataType,proto3,enum=schema.DataType" json:"data_type,omitempty"`
	// data encoding
	Encoding Encoding `protobuf:"varint,5,opt,name=encoding,proto3,enum=data.Encoding" json:"encoding,omitempty"`
}

func (x *GetDataRequest) Reset() {
	*x = GetDataRequest{}
	mi := &file_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataRequest) ProtoMessage() {}

func (x *GetDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataRequest.ProtoReflect.Descriptor instead.
func (*GetDataRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0}
}

func (x *GetDataRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDataRequest) GetDatastore() *DataStore {
	if x != nil {
		return x.Datastore
	}
	return nil
}

func (x *GetDataRequest) GetPath() []*Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *GetDataRequest) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_ALL
}

func (x *GetDataRequest) GetEncoding() Encoding {
	if x != nil {
		return x.Encoding
	}
	return Encoding_STRING
}

type GetDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of paths and values
	Notification []*Notification `protobuf:"bytes,1,rep,name=notification,proto3" json:"notification,omitempty"`
}

func (x *GetDataResponse) Reset() {
	*x = GetDataResponse{}
	mi := &file_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataResponse) ProtoMessage() {}

func (x *GetDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataResponse.ProtoReflect.Descriptor instead.
func (*GetDataResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{1}
}

func (x *GetDataResponse) GetNotification() []*Notification {
	if x != nil {
		return x.Notification
	}
	return nil
}

type SetDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// datastore name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// datastore type and name
	Datastore *DataStore `protobuf:"bytes,2,opt,name=datastore,proto3" json:"datastore,omitempty"`
	// list of updates
	Update []*Update `protobuf:"bytes,10,rep,name=update,proto3" json:"update,omitempty"`
	// list of replaces
	Replace []*Update `protobuf:"bytes,11,rep,name=replace,proto3" json:"replace,omitempty"`
	// list of deletes
	Delete []*Path `protobuf:"bytes,12,rep,name=delete,proto3" json:"delete,omitempty"`
}

func (x *SetDataRequest) Reset() {
	*x = SetDataRequest{}
	mi := &file_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDataRequest) ProtoMessage() {}

func (x *SetDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDataRequest.ProtoReflect.Descriptor instead.
func (*SetDataRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{2}
}

func (x *SetDataRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetDataRequest) GetDatastore() *DataStore {
	if x != nil {
		return x.Datastore
	}
	return nil
}

func (x *SetDataRequest) GetUpdate() []*Update {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *SetDataRequest) GetReplace() []*Update {
	if x != nil {
		return x.Replace
	}
	return nil
}

func (x *SetDataRequest) GetDelete() []*Path {
	if x != nil {
		return x.Delete
	}
	return nil
}

type SetDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A set of responses specifying the result of the operations specified in
	// the SetRequest.
	Response []*UpdateResult `protobuf:"bytes,2,rep,name=response,proto3" json:"response,omitempty"`
	// e.g. netconf rpc-errors with severity warning
	Warnings []string `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
	// Timestamp of transaction (ns since epoch).
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SetDataResponse) Reset() {
	*x = SetDataResponse{}
	mi := &file_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDataResponse) ProtoMessage() {}

func (x *SetDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDataResponse.ProtoReflect.Descriptor instead.
func (*SetDataResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3}
}

func (x *SetDataResponse) GetResponse() []*UpdateResult {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SetDataResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *SetDataResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// DS
type ListDataStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListDataStoreRequest) Reset() {
	*x = ListDataStoreRequest{}
	mi := &file_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDataStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataStoreRequest) ProtoMessage() {}

func (x *ListDataStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataStoreRequest.ProtoReflect.Descriptor instead.
func (*ListDataStoreRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4}
}

type ListDataStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datastores []*GetDataStoreResponse `protobuf:"bytes,1,rep,name=datastores,proto3" json:"datastores,omitempty"`
}

func (x *ListDataStoreResponse) Reset() {
	*x = ListDataStoreResponse{}
	mi := &file_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDataStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataStoreResponse) ProtoMessage() {}

func (x *ListDataStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataStoreResponse.ProtoReflect.Descriptor instead.
func (*ListDataStoreResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5}
}

func (x *ListDataStoreResponse) GetDatastores() []*GetDataStoreResponse {
	if x != nil {
		return x.Datastores
	}
	return nil
}

type GetDataStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// datastore name
	DatastoreName string `protobuf:"bytes,1,opt,name=datastore_name,json=datastoreName,proto3" json:"datastore_name,omitempty"`
}

func (x *GetDataStoreRequest) Reset() {
	*x = GetDataStoreRequest{}
	mi := &file_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataStoreRequest) ProtoMessage() {}

func (x *GetDataStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataStoreRequest.ProtoReflect.Descriptor instead.
func (*GetDataStoreRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{6}
}

func (x *GetDataStoreRequest) GetDatastoreName() string {
	if x != nil {
		return x.DatastoreName
	}
	return ""
}

type GetDataStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// datastore name
	DatastoreName string `protobuf:"bytes,1,opt,name=datastore_name,json=datastoreName,proto3" json:"datastore_name,omitempty"`
	// list of intents in this datastore
	Intents []string `protobuf:"bytes,2,rep,name=intents,proto3" json:"intents,omitempty"`
	// the schema this datastore should comply with
	Schema *Schema `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	// south bound interface target of this datastore
	Target *Target `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *GetDataStoreResponse) Reset() {
	*x = GetDataStoreResponse{}
	mi := &file_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataStoreResponse) ProtoMessage() {}

func (x *GetDataStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataStoreResponse.ProtoReflect.Descriptor instead.
func (*GetDataStoreResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{7}
}

func (x *GetDataStoreResponse) GetDatastoreName() string {
	if x != nil {
		return x.DatastoreName
	}
	return ""
}

func (x *GetDataStoreResponse) GetIntents() []string {
	if x != nil {
		return x.Intents
	}
	return nil
}

func (x *GetDataStoreResponse) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *GetDataStoreResponse) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

type CreateDataStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// datastore name
	DatastoreName string `protobuf:"bytes,1,opt,name=datastore_name,json=datastoreName,proto3" json:"datastore_name,omitempty"`
	// the schema this datastore should comply with
	Schema *Schema `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	// south bound interface target of this datastore
	Target *Target `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	// datastore sync strategy
	Sync *Sync `protobuf:"bytes,5,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *CreateDataStoreRequest) Reset() {
	*x = CreateDataStoreRequest{}
	mi := &file_data_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDataStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataStoreRequest) ProtoMessage() {}

func (x *CreateDataStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataStoreRequest.ProtoReflect.Descriptor instead.
func (*CreateDataStoreRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{8}
}

func (x *CreateDataStoreRequest) GetDatastoreName() string {
	if x != nil {
		return x.DatastoreName
	}
	return ""
}

func (x *CreateDataStoreRequest) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CreateDataStoreRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *CreateDataStoreRequest) GetSync() *Sync {
	if x != nil {
		return x.Sync
	}
	return nil
}

type CreateDataStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateDataStoreResponse) Reset() {
	*x = CreateDataStoreResponse{}
	mi := &file_data_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDataStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataStoreResponse) ProtoMessage() {}

func (x *CreateDataStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataStoreResponse.ProtoReflect.Descriptor instead.
func (*CreateDataStoreResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{9}
}

type DeleteDataStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// datastore name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteDataStoreRequest) Reset() {
	*x = DeleteDataStoreRequest{}
	mi := &file_data_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDataStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataStoreRequest) ProtoMessage() {}

func (x *DeleteDataStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataStoreRequest.ProtoReflect.Descriptor instead.
func (*DeleteDataStoreRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteDataStoreRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteDataStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDataStoreResponse) Reset() {
	*x = DeleteDataStoreResponse{}
	mi := &file_data_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDataStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataStoreResponse) ProtoMessage() {}

func (x *DeleteDataStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataStoreResponse.ProtoReflect.Descriptor instead.
func (*DeleteDataStoreResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{11}
}

type GetIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// datastore name
	DatastoreName string `protobuf:"bytes,1,opt,name=datastore_name,json=datastoreName,proto3" json:"datastore_name,omitempty"`
	// intent name
	Intent string `protobuf:"bytes,2,opt,name=intent,proto3" json:"intent,omitempty"`
	// format
	Format Format `protobuf:"varint,3,opt,name=format,proto3,enum=data.Format" json:"format,omitempty"`
}

func (x *GetIntentRequest) Reset() {
	*x = GetIntentRequest{}
	mi := &file_data_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntentRequest) ProtoMessage() {}

func (x *GetIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntentRequest.ProtoReflect.Descriptor instead.
func (*GetIntentRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{12}
}

func (x *GetIntentRequest) GetDatastoreName() string {
	if x != nil {
		return x.DatastoreName
	}
	return ""
}

func (x *GetIntentRequest) GetIntent() string {
	if x != nil {
		return x.Intent
	}
	return ""
}

func (x *GetIntentRequest) GetFormat() Format {
	if x != nil {
		return x.Format
	}
	return Format_Intent_Format_JSON
}

type GetIntentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// datastore name
	DatastoreName string `protobuf:"bytes,1,opt,name=datastore_name,json=datastoreName,proto3" json:"datastore_name,omitempty"`
	// format
	Format Format `protobuf:"varint,2,opt,name=format,proto3,enum=data.Format" json:"format,omitempty"`
	// intent details
	//
	// Types that are assignable to Intent:
	//
	//	*GetIntentResponse_Proto
	//	*GetIntentResponse_Blob
	Intent isGetIntentResponse_Intent `protobuf_oneof:"intent"`
}

func (x *GetIntentResponse) Reset() {
	*x = GetIntentResponse{}
	mi := &file_data_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIntentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntentResponse) ProtoMessage() {}

func (x *GetIntentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntentResponse.ProtoReflect.Descriptor instead.
func (*GetIntentResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{13}
}

func (x *GetIntentResponse) GetDatastoreName() string {
	if x != nil {
		return x.DatastoreName
	}
	return ""
}

func (x *GetIntentResponse) GetFormat() Format {
	if x != nil {
		return x.Format
	}
	return Format_Intent_Format_JSON
}

func (m *GetIntentResponse) GetIntent() isGetIntentResponse_Intent {
	if m != nil {
		return m.Intent
	}
	return nil
}

func (x *GetIntentResponse) GetProto() *Intent {
	if x, ok := x.GetIntent().(*GetIntentResponse_Proto); ok {
		return x.Proto
	}
	return nil
}

func (x *GetIntentResponse) GetBlob() []byte {
	if x, ok := x.GetIntent().(*GetIntentResponse_Blob); ok {
		return x.Blob
	}
	return nil
}

type isGetIntentResponse_Intent interface {
	isGetIntentResponse_Intent()
}

type GetIntentResponse_Proto struct {
	Proto *Intent `protobuf:"bytes,3,opt,name=proto,proto3,oneof"`
}

type GetIntentResponse_Blob struct {
	Blob []byte `protobuf:"bytes,4,opt,name=blob,proto3,oneof"`
}

func (*GetIntentResponse_Proto) isGetIntentResponse_Intent() {}

func (*GetIntentResponse_Blob) isGetIntentResponse_Intent() {}

type TransactionSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction ID
	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// datastore name
	DatastoreName string `protobuf:"bytes,2,opt,name=datastore_name,json=datastoreName,proto3" json:"datastore_name,omitempty"`
	// dry run indicator
	DryRun bool `protobuf:"varint,3,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// optional timeout, seconds how long Transaction remains active
	// before being auto-canceled if not commited before
	Timeout *int32 `protobuf:"varint,4,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	// list of intents that make up the transaction
	Intents       []*TransactionIntent `protobuf:"bytes,5,rep,name=intents,proto3" json:"intents,omitempty"`
	ReplaceIntent *TransactionIntent   `protobuf:"bytes,6,opt,name=replace_intent,json=replaceIntent,proto3" json:"replace_intent,omitempty"`
}

func (x *TransactionSetRequest) Reset() {
	*x = TransactionSetRequest{}
	mi := &file_data_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionSetRequest) ProtoMessage() {}

func (x *TransactionSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionSetRequest.ProtoReflect.Descriptor instead.
func (*TransactionSetRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{14}
}

func (x *TransactionSetRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TransactionSetRequest) GetDatastoreName() string {
	if x != nil {
		return x.DatastoreName
	}
	return ""
}

func (x *TransactionSetRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *TransactionSetRequest) GetTimeout() int32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *TransactionSetRequest) GetIntents() []*TransactionIntent {
	if x != nil {
		return x.Intents
	}
	return nil
}

func (x *TransactionSetRequest) GetReplaceIntent() *TransactionIntent {
	if x != nil {
		return x.ReplaceIntent
	}
	return nil
}

type TransactionIntent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// intent name
	Intent string `protobuf:"bytes,1,opt,name=intent,proto3" json:"intent,omitempty"`
	// intent priority
	Priority int32 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	// list of updates
	Update []*Update `protobuf:"bytes,3,rep,name=update,proto3" json:"update,omitempty"`
	// delete indicator
	Delete bool `protobuf:"varint,4,opt,name=delete,proto3" json:"delete,omitempty"`
	// delete only from intended store
	// basically keeping the config on the device but unmanaged
	Orphan bool `protobuf:"varint,5,opt,name=orphan,proto3" json:"orphan,omitempty"`
}

func (x *TransactionIntent) Reset() {
	*x = TransactionIntent{}
	mi := &file_data_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionIntent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionIntent) ProtoMessage() {}

func (x *TransactionIntent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionIntent.ProtoReflect.Descriptor instead.
func (*TransactionIntent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{15}
}

func (x *TransactionIntent) GetIntent() string {
	if x != nil {
		return x.Intent
	}
	return ""
}

func (x *TransactionIntent) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *TransactionIntent) GetUpdate() []*Update {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *TransactionIntent) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

func (x *TransactionIntent) GetOrphan() bool {
	if x != nil {
		return x.Orphan
	}
	return false
}

type TransactionSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update   []*Update                                `protobuf:"bytes,1,rep,name=update,proto3" json:"update,omitempty"`
	Delete   []*Path                                  `protobuf:"bytes,2,rep,name=delete,proto3" json:"delete,omitempty"`
	Intents  map[string]*TransactionSetResponseIntent `protobuf:"bytes,3,rep,name=intents,proto3" json:"intents,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Warnings []string                                 `protobuf:"bytes,4,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *TransactionSetResponse) Reset() {
	*x = TransactionSetResponse{}
	mi := &file_data_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionSetResponse) ProtoMessage() {}

func (x *TransactionSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionSetResponse.ProtoReflect.Descriptor instead.
func (*TransactionSetResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{16}
}

func (x *TransactionSetResponse) GetUpdate() []*Update {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *TransactionSetResponse) GetDelete() []*Path {
	if x != nil {
		return x.Delete
	}
	return nil
}

func (x *TransactionSetResponse) GetIntents() map[string]*TransactionSetResponseIntent {
	if x != nil {
		return x.Intents
	}
	return nil
}

func (x *TransactionSetResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type TransactionSetResponseIntent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Warnings []string `protobuf:"bytes,1,rep,name=warnings,proto3" json:"warnings,omitempty"`
	Errors   []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *TransactionSetResponseIntent) Reset() {
	*x = TransactionSetResponseIntent{}
	mi := &file_data_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionSetResponseIntent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionSetResponseIntent) ProtoMessage() {}

func (x *TransactionSetResponseIntent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionSetResponseIntent.ProtoReflect.Descriptor instead.
func (*TransactionSetResponseIntent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{17}
}

func (x *TransactionSetResponseIntent) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *TransactionSetResponseIntent) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type TransactionCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// datastore name
	DatastoreName string `protobuf:"bytes,1,opt,name=datastore_name,json=datastoreName,proto3" json:"datastore_name,omitempty"`
	// Transaction ID
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *TransactionCancelRequest) Reset() {
	*x = TransactionCancelRequest{}
	mi := &file_data_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionCancelRequest) ProtoMessage() {}

func (x *TransactionCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionCancelRequest.ProtoReflect.Descriptor instead.
func (*TransactionCancelRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{18}
}

func (x *TransactionCancelRequest) GetDatastoreName() string {
	if x != nil {
		return x.DatastoreName
	}
	return ""
}

func (x *TransactionCancelRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type TransactionCancelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransactionCancelResponse) Reset() {
	*x = TransactionCancelResponse{}
	mi := &file_data_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionCancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionCancelResponse) ProtoMessage() {}

func (x *TransactionCancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionCancelResponse.ProtoReflect.Descriptor instead.
func (*TransactionCancelResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{19}
}

type TransactionConfirmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// datastore name
	DatastoreName string `protobuf:"bytes,1,opt,name=datastore_name,json=datastoreName,proto3" json:"datastore_name,omitempty"`
	// Transaction ID
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *TransactionConfirmRequest) Reset() {
	*x = TransactionConfirmRequest{}
	mi := &file_data_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionConfirmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionConfirmRequest) ProtoMessage() {}

func (x *TransactionConfirmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionConfirmRequest.ProtoReflect.Descriptor instead.
func (*TransactionConfirmRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{20}
}

func (x *TransactionConfirmRequest) GetDatastoreName() string {
	if x != nil {
		return x.DatastoreName
	}
	return ""
}

func (x *TransactionConfirmRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type TransactionConfirmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransactionConfirmResponse) Reset() {
	*x = TransactionConfirmResponse{}
	mi := &file_data_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionConfirmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionConfirmResponse) ProtoMessage() {}

func (x *TransactionConfirmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionConfirmResponse.ProtoReflect.Descriptor instead.
func (*TransactionConfirmResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{21}
}

type ListIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// datastore name
	DatastoreName string `protobuf:"bytes,1,opt,name=datastore_name,json=datastoreName,proto3" json:"datastore_name,omitempty"`
}

func (x *ListIntentRequest) Reset() {
	*x = ListIntentRequest{}
	mi := &file_data_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIntentRequest) ProtoMessage() {}

func (x *ListIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIntentRequest.ProtoReflect.Descriptor instead.
func (*ListIntentRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{22}
}

func (x *ListIntentRequest) GetDatastoreName() string {
	if x != nil {
		return x.DatastoreName
	}
	return ""
}

type ListIntentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatastoreName string `protobuf:"bytes,1,opt,name=datastore_name,json=datastoreName,proto3" json:"datastore_name,omitempty"`
	// list of intents without updates
	Intent []string `protobuf:"bytes,2,rep,name=intent,proto3" json:"intent,omitempty"`
}

func (x *ListIntentResponse) Reset() {
	*x = ListIntentResponse{}
	mi := &file_data_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIntentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIntentResponse) ProtoMessage() {}

func (x *ListIntentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIntentResponse.ProtoReflect.Descriptor instead.
func (*ListIntentResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{23}
}

func (x *ListIntentResponse) GetDatastoreName() string {
	if x != nil {
		return x.DatastoreName
	}
	return ""
}

func (x *ListIntentResponse) GetIntent() []string {
	if x != nil {
		return x.Intent
	}
	return nil
}

type WatchDeviationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// datastore name
	Name []string `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
}

func (x *WatchDeviationRequest) Reset() {
	*x = WatchDeviationRequest{}
	mi := &file_data_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchDeviationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchDeviationRequest) ProtoMessage() {}

func (x *WatchDeviationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchDeviationRequest.ProtoReflect.Descriptor instead.
func (*WatchDeviationRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{24}
}

func (x *WatchDeviationRequest) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

type WatchDeviationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// datastore name
	Name          string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Intent        string          `protobuf:"bytes,2,opt,name=intent,proto3" json:"intent,omitempty"`
	Event         DeviationEvent  `protobuf:"varint,3,opt,name=event,proto3,enum=data.DeviationEvent" json:"event,omitempty"`
	Reason        DeviationReason `protobuf:"varint,4,opt,name=reason,proto3,enum=data.DeviationReason" json:"reason,omitempty"`
	Path          *Path           `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	ExpectedValue *TypedValue     `protobuf:"bytes,6,opt,name=expected_value,json=expectedValue,proto3" json:"expected_value,omitempty"`
	CurrentValue  *TypedValue     `protobuf:"bytes,7,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`
}

func (x *WatchDeviationResponse) Reset() {
	*x = WatchDeviationResponse{}
	mi := &file_data_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchDeviationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchDeviationResponse) ProtoMessage() {}

func (x *WatchDeviationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchDeviationResponse.ProtoReflect.Descriptor instead.
func (*WatchDeviationResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{25}
}

func (x *WatchDeviationResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WatchDeviationResponse) GetIntent() string {
	if x != nil {
		return x.Intent
	}
	return ""
}

func (x *WatchDeviationResponse) GetEvent() DeviationEvent {
	if x != nil {
		return x.Event
	}
	return DeviationEvent_DE_UNKNOWN
}

func (x *WatchDeviationResponse) GetReason() DeviationReason {
	if x != nil {
		return x.Reason
	}
	return DeviationReason_DR_UNKNOWN
}

func (x *WatchDeviationResponse) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *WatchDeviationResponse) GetExpectedValue() *TypedValue {
	if x != nil {
		return x.ExpectedValue
	}
	return nil
}

func (x *WatchDeviationResponse) GetCurrentValue() *TypedValue {
	if x != nil {
		return x.CurrentValue
	}
	return nil
}

// sub messages
type Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path  *Path       `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Value *TypedValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Update) Reset() {
	*x = Update{}
	mi := &file_data_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update) ProtoMessage() {}

func (x *Update) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update.ProtoReflect.Descriptor instead.
func (*Update) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{26}
}

func (x *Update) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Update) GetValue() *TypedValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type DiffUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path           *Path       `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	MainValue      *TypedValue `protobuf:"bytes,2,opt,name=main_value,json=mainValue,proto3" json:"main_value,omitempty"`
	CandidateValue *TypedValue `protobuf:"bytes,3,opt,name=candidate_value,json=candidateValue,proto3" json:"candidate_value,omitempty"`
}

func (x *DiffUpdate) Reset() {
	*x = DiffUpdate{}
	mi := &file_data_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiffUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffUpdate) ProtoMessage() {}

func (x *DiffUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffUpdate.ProtoReflect.Descriptor instead.
func (*DiffUpdate) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{27}
}

func (x *DiffUpdate) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *DiffUpdate) GetMainValue() *TypedValue {
	if x != nil {
		return x.MainValue
	}
	return nil
}

func (x *DiffUpdate) GetCandidateValue() *TypedValue {
	if x != nil {
		return x.CandidateValue
	}
	return nil
}

type TypedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Value:
	//
	//	*TypedValue_StringVal
	//	*TypedValue_IntVal
	//	*TypedValue_UintVal
	//	*TypedValue_BoolVal
	//	*TypedValue_BytesVal
	//	*TypedValue_FloatVal
	//	*TypedValue_DecimalVal
	//	*TypedValue_DoubleVal
	//	*TypedValue_LeaflistVal
	//	*TypedValue_AnyVal
	//	*TypedValue_JsonVal
	//	*TypedValue_JsonIetfVal
	//	*TypedValue_AsciiVal
	//	*TypedValue_ProtoBytes
	//	*TypedValue_EmptyVal
	//	*TypedValue_IdentityrefVal
	Value isTypedValue_Value `protobuf_oneof:"value"`
}

func (x *TypedValue) Reset() {
	*x = TypedValue{}
	mi := &file_data_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypedValue) ProtoMessage() {}

func (x *TypedValue) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypedValue.ProtoReflect.Descriptor instead.
func (*TypedValue) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{28}
}

func (x *TypedValue) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (m *TypedValue) GetValue() isTypedValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *TypedValue) GetStringVal() string {
	if x, ok := x.GetValue().(*TypedValue_StringVal); ok {
		return x.StringVal
	}
	return ""
}

func (x *TypedValue) GetIntVal() int64 {
	if x, ok := x.GetValue().(*TypedValue_IntVal); ok {
		return x.IntVal
	}
	return 0
}

func (x *TypedValue) GetUintVal() uint64 {
	if x, ok := x.GetValue().(*TypedValue_UintVal); ok {
		return x.UintVal
	}
	return 0
}

func (x *TypedValue) GetBoolVal() bool {
	if x, ok := x.GetValue().(*TypedValue_BoolVal); ok {
		return x.BoolVal
	}
	return false
}

func (x *TypedValue) GetBytesVal() []byte {
	if x, ok := x.GetValue().(*TypedValue_BytesVal); ok {
		return x.BytesVal
	}
	return nil
}

func (x *TypedValue) GetFloatVal() float32 {
	if x, ok := x.GetValue().(*TypedValue_FloatVal); ok {
		return x.FloatVal
	}
	return 0
}

func (x *TypedValue) GetDecimalVal() *Decimal64 {
	if x, ok := x.GetValue().(*TypedValue_DecimalVal); ok {
		return x.DecimalVal
	}
	return nil
}

func (x *TypedValue) GetDoubleVal() float64 {
	if x, ok := x.GetValue().(*TypedValue_DoubleVal); ok {
		return x.DoubleVal
	}
	return 0
}

func (x *TypedValue) GetLeaflistVal() *ScalarArray {
	if x, ok := x.GetValue().(*TypedValue_LeaflistVal); ok {
		return x.LeaflistVal
	}
	return nil
}

func (x *TypedValue) GetAnyVal() *anypb.Any {
	if x, ok := x.GetValue().(*TypedValue_AnyVal); ok {
		return x.AnyVal
	}
	return nil
}

func (x *TypedValue) GetJsonVal() []byte {
	if x, ok := x.GetValue().(*TypedValue_JsonVal); ok {
		return x.JsonVal
	}
	return nil
}

func (x *TypedValue) GetJsonIetfVal() []byte {
	if x, ok := x.GetValue().(*TypedValue_JsonIetfVal); ok {
		return x.JsonIetfVal
	}
	return nil
}

func (x *TypedValue) GetAsciiVal() string {
	if x, ok := x.GetValue().(*TypedValue_AsciiVal); ok {
		return x.AsciiVal
	}
	return ""
}

func (x *TypedValue) GetProtoBytes() []byte {
	if x, ok := x.GetValue().(*TypedValue_ProtoBytes); ok {
		return x.ProtoBytes
	}
	return nil
}

func (x *TypedValue) GetEmptyVal() *emptypb.Empty {
	if x, ok := x.GetValue().(*TypedValue_EmptyVal); ok {
		return x.EmptyVal
	}
	return nil
}

func (x *TypedValue) GetIdentityrefVal() *IdentityRef {
	if x, ok := x.GetValue().(*TypedValue_IdentityrefVal); ok {
		return x.IdentityrefVal
	}
	return nil
}

type isTypedValue_Value interface {
	isTypedValue_Value()
}

type TypedValue_StringVal struct {
	StringVal string `protobuf:"bytes,2,opt,name=string_val,json=stringVal,proto3,oneof"`
}

type TypedValue_IntVal struct {
	IntVal int64 `protobuf:"varint,3,opt,name=int_val,json=intVal,proto3,oneof"`
}

type TypedValue_UintVal struct {
	UintVal uint64 `protobuf:"varint,4,opt,name=uint_val,json=uintVal,proto3,oneof"`
}

type TypedValue_BoolVal struct {
	BoolVal bool `protobuf:"varint,5,opt,name=bool_val,json=boolVal,proto3,oneof"`
}

type TypedValue_BytesVal struct {
	BytesVal []byte `protobuf:"bytes,6,opt,name=bytes_val,json=bytesVal,proto3,oneof"`
}

type TypedValue_FloatVal struct {
	FloatVal float32 `protobuf:"fixed32,7,opt,name=float_val,json=floatVal,proto3,oneof"`
}

type TypedValue_DecimalVal struct {
	DecimalVal *Decimal64 `protobuf:"bytes,8,opt,name=decimal_val,json=decimalVal,proto3,oneof"`
}

type TypedValue_DoubleVal struct {
	DoubleVal float64 `protobuf:"fixed64,9,opt,name=Double_val,json=DoubleVal,proto3,oneof"`
}

type TypedValue_LeaflistVal struct {
	LeaflistVal *ScalarArray `protobuf:"bytes,10,opt,name=leaflist_val,json=leaflistVal,proto3,oneof"`
}

type TypedValue_AnyVal struct {
	AnyVal *anypb.Any `protobuf:"bytes,11,opt,name=any_val,json=anyVal,proto3,oneof"`
}

type TypedValue_JsonVal struct {
	JsonVal []byte `protobuf:"bytes,12,opt,name=json_val,json=jsonVal,proto3,oneof"`
}

type TypedValue_JsonIetfVal struct {
	JsonIetfVal []byte `protobuf:"bytes,13,opt,name=json_ietf_val,json=jsonIetfVal,proto3,oneof"`
}

type TypedValue_AsciiVal struct {
	AsciiVal string `protobuf:"bytes,14,opt,name=ascii_val,json=asciiVal,proto3,oneof"`
}

type TypedValue_ProtoBytes struct {
	ProtoBytes []byte `protobuf:"bytes,15,opt,name=proto_bytes,json=protoBytes,proto3,oneof"`
}

type TypedValue_EmptyVal struct {
	EmptyVal *emptypb.Empty `protobuf:"bytes,16,opt,name=empty_val,json=emptyVal,proto3,oneof"`
}

type TypedValue_IdentityrefVal struct {
	IdentityrefVal *IdentityRef `protobuf:"bytes,17,opt,name=identityref_val,json=identityrefVal,proto3,oneof"`
}

func (*TypedValue_StringVal) isTypedValue_Value() {}

func (*TypedValue_IntVal) isTypedValue_Value() {}

func (*TypedValue_UintVal) isTypedValue_Value() {}

func (*TypedValue_BoolVal) isTypedValue_Value() {}

func (*TypedValue_BytesVal) isTypedValue_Value() {}

func (*TypedValue_FloatVal) isTypedValue_Value() {}

func (*TypedValue_DecimalVal) isTypedValue_Value() {}

func (*TypedValue_DoubleVal) isTypedValue_Value() {}

func (*TypedValue_LeaflistVal) isTypedValue_Value() {}

func (*TypedValue_AnyVal) isTypedValue_Value() {}

func (*TypedValue_JsonVal) isTypedValue_Value() {}

func (*TypedValue_JsonIetfVal) isTypedValue_Value() {}

func (*TypedValue_AsciiVal) isTypedValue_Value() {}

func (*TypedValue_ProtoBytes) isTypedValue_Value() {}

func (*TypedValue_EmptyVal) isTypedValue_Value() {}

func (*TypedValue_IdentityrefVal) isTypedValue_Value() {}

type IdentityRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Module string `protobuf:"bytes,3,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *IdentityRef) Reset() {
	*x = IdentityRef{}
	mi := &file_data_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityRef) ProtoMessage() {}

func (x *IdentityRef) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityRef.ProtoReflect.Descriptor instead.
func (*IdentityRef) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{29}
}

func (x *IdentityRef) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *IdentityRef) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *IdentityRef) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

type UpdateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path *Path                  `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`                               // schema.Path associated with the update.
	Op   UpdateResult_Operation `protobuf:"varint,4,opt,name=op,proto3,enum=data.UpdateResult_Operation" json:"op,omitempty"` // Update operation type.
}

func (x *UpdateResult) Reset() {
	*x = UpdateResult{}
	mi := &file_data_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResult) ProtoMessage() {}

func (x *UpdateResult) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResult.ProtoReflect.Descriptor instead.
func (*UpdateResult) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateResult) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *UpdateResult) GetOp() UpdateResult_Operation {
	if x != nil {
		return x.Op
	}
	return UpdateResult_INVALID
}

type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp in nanoseconds since Epoch.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Data elements that have changed values.
	Update []*Update `protobuf:"bytes,4,rep,name=update,proto3" json:"update,omitempty"`
	// Data elements that have been deleted.
	Delete []*Path `protobuf:"bytes,5,rep,name=delete,proto3" json:"delete,omitempty"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	mi := &file_data_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{31}
}

func (x *Notification) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Notification) GetUpdate() []*Update {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *Notification) GetDelete() []*Path {
	if x != nil {
		return x.Delete
	}
	return nil
}

type DataStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the datastore (candidate)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// candidate datastore owner
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// candidate datastore priority
	Priority int32 `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *DataStore) Reset() {
	*x = DataStore{}
	mi := &file_data_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataStore) ProtoMessage() {}

func (x *DataStore) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataStore.ProtoReflect.Descriptor instead.
func (*DataStore) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{32}
}

func (x *DataStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataStore) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *DataStore) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

// Decimal64 is used to encode a fixed precision decimal number. The value
// is expressed as a set of digits with the precision specifying the
// number of digits following the decimal point in the digit set.
type Decimal64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digits    int64  `protobuf:"varint,1,opt,name=digits,proto3" json:"digits,omitempty"`       // Set of digits.
	Precision uint32 `protobuf:"varint,2,opt,name=precision,proto3" json:"precision,omitempty"` // Number of digits following the decimal point.
}

func (x *Decimal64) Reset() {
	*x = Decimal64{}
	mi := &file_data_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Decimal64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decimal64) ProtoMessage() {}

func (x *Decimal64) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decimal64.ProtoReflect.Descriptor instead.
func (*Decimal64) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{33}
}

func (x *Decimal64) GetDigits() int64 {
	if x != nil {
		return x.Digits
	}
	return 0
}

func (x *Decimal64) GetPrecision() uint32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

// ScalarArray is used to encode a mixed-type array of values.
type ScalarArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of elements within the array. Each TypedValue message should
	// specify only elements that have a field identifier of 1-7 (i.e., the
	// values are scalar values).
	Element []*TypedValue `protobuf:"bytes,1,rep,name=element,proto3" json:"element,omitempty"`
}

func (x *ScalarArray) Reset() {
	*x = ScalarArray{}
	mi := &file_data_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScalarArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarArray) ProtoMessage() {}

func (x *ScalarArray) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarArray.ProtoReflect.Descriptor instead.
func (*ScalarArray) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{34}
}

func (x *ScalarArray) GetElement() []*TypedValue {
	if x != nil {
		return x.Element
	}
	return nil
}

type NetconfOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// for netconf targets:
	// include namespace if a prefix is present
	// in the path elements.
	IncludeNs bool `protobuf:"varint,5,opt,name=include_ns,json=includeNs,proto3" json:"include_ns,omitempty"`
	// for netconf targets:
	// add base1.0 as ns for operation attribute.
	OperationWithNs bool `protobuf:"varint,6,opt,name=operation_with_ns,json=operationWithNs,proto3" json:"operation_with_ns,omitempty"`
	// for netconf targets:
	// use operation remove instead of delete when deleting.
	UseOperationRemove bool `protobuf:"varint,7,opt,name=use_operation_remove,json=useOperationRemove,proto3" json:"use_operation_remove,omitempty"`
	// for netconf type, specifies which datastore to commit.
	// Can be either `candidate` or `running`.
	CommitCandidate CommitCandidate `protobuf:"varint,8,opt,name=commit_candidate,json=commitCandidate,proto3,enum=data.CommitCandidate" json:"commit_candidate,omitempty"`
}

func (x *NetconfOptions) Reset() {
	*x = NetconfOptions{}
	mi := &file_data_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetconfOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetconfOptions) ProtoMessage() {}

func (x *NetconfOptions) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetconfOptions.ProtoReflect.Descriptor instead.
func (*NetconfOptions) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{35}
}

func (x *NetconfOptions) GetIncludeNs() bool {
	if x != nil {
		return x.IncludeNs
	}
	return false
}

func (x *NetconfOptions) GetOperationWithNs() bool {
	if x != nil {
		return x.OperationWithNs
	}
	return false
}

func (x *NetconfOptions) GetUseOperationRemove() bool {
	if x != nil {
		return x.UseOperationRemove
	}
	return false
}

func (x *NetconfOptions) GetCommitCandidate() CommitCandidate {
	if x != nil {
		return x.CommitCandidate
	}
	return CommitCandidate_COMMIT_CANDIDATE
}

type GnmiOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// for gnmi targets
	Encoding string `protobuf:"bytes,11,opt,name=encoding,proto3" json:"encoding,omitempty"`
}

func (x *GnmiOptions) Reset() {
	*x = GnmiOptions{}
	mi := &file_data_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GnmiOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnmiOptions) ProtoMessage() {}

func (x *GnmiOptions) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnmiOptions.ProtoReflect.Descriptor instead.
func (*GnmiOptions) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{36}
}

func (x *GnmiOptions) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

// Southbound interface of the datastore
type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// target type: gnmi or netconf
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// target address
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// per protocol ports
	Port uint32 `protobuf:"varint,12,opt,name=port,proto3" json:"port,omitempty"`
	// tls client certs, ca cert or skip_verify
	Tls *TLS `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`
	// target credentials
	Credentials *Credentials `protobuf:"bytes,4,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// protocol options
	//
	// Types that are assignable to ProtocolOptions:
	//
	//	*Target_GnmiOpts
	//	*Target_NetconfOpts
	ProtocolOptions isTarget_ProtocolOptions `protobuf_oneof:"protocolOptions"`
	// reflects the target connection status
	Status TargetStatus `protobuf:"varint,9,opt,name=status,proto3,enum=data.TargetStatus" json:"status,omitempty"`
	// if the status is NOT_CONNECTED, this fields might
	// more details about the reason.
	StatusDetails string `protobuf:"bytes,10,opt,name=status_details,json=statusDetails,proto3" json:"status_details,omitempty"`
}

func (x *Target) Reset() {
	*x = Target{}
	mi := &file_data_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{37}
}

func (x *Target) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Target) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Target) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Target) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Target) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (m *Target) GetProtocolOptions() isTarget_ProtocolOptions {
	if m != nil {
		return m.ProtocolOptions
	}
	return nil
}

func (x *Target) GetGnmiOpts() *GnmiOptions {
	if x, ok := x.GetProtocolOptions().(*Target_GnmiOpts); ok {
		return x.GnmiOpts
	}
	return nil
}

func (x *Target) GetNetconfOpts() *NetconfOptions {
	if x, ok := x.GetProtocolOptions().(*Target_NetconfOpts); ok {
		return x.NetconfOpts
	}
	return nil
}

func (x *Target) GetStatus() TargetStatus {
	if x != nil {
		return x.Status
	}
	return TargetStatus_UNKNOWN
}

func (x *Target) GetStatusDetails() string {
	if x != nil {
		return x.StatusDetails
	}
	return ""
}

type isTarget_ProtocolOptions interface {
	isTarget_ProtocolOptions()
}

type Target_GnmiOpts struct {
	GnmiOpts *GnmiOptions `protobuf:"bytes,5,opt,name=gnmi_opts,json=gnmiOpts,proto3,oneof"`
}

type Target_NetconfOpts struct {
	NetconfOpts *NetconfOptions `protobuf:"bytes,6,opt,name=netconf_opts,json=netconfOpts,proto3,oneof"`
}

func (*Target_GnmiOpts) isTarget_ProtocolOptions() {}

func (*Target_NetconfOpts) isTarget_ProtocolOptions() {}

// TLS Config
type TLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ca         string `protobuf:"bytes,1,opt,name=ca,proto3" json:"ca,omitempty"`
	Cert       string `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Key        string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	SkipVerify bool   `protobuf:"varint,4,opt,name=skip_verify,json=skipVerify,proto3" json:"skip_verify,omitempty"`
}

func (x *TLS) Reset() {
	*x = TLS{}
	mi := &file_data_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLS) ProtoMessage() {}

func (x *TLS) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLS.ProtoReflect.Descriptor instead.
func (*TLS) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{38}
}

func (x *TLS) GetCa() string {
	if x != nil {
		return x.Ca
	}
	return ""
}

func (x *TLS) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *TLS) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TLS) GetSkipVerify() bool {
	if x != nil {
		return x.SkipVerify
	}
	return false
}

// Target Credentials
type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Token    string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	mi := &file_data_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{39}
}

func (x *Credentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Credentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Credentials) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type Sync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if true, all received notifications
	// are validated agains the schema
	Validate bool `protobuf:"varint,1,opt,name=validate,proto3" json:"validate,omitempty"`
	// number of notification to buffer while writing
	// to cache
	Buffer int64 `protobuf:"varint,2,opt,name=buffer,proto3" json:"buffer,omitempty"`
	// number of cache writers
	WriteWorkers int64 `protobuf:"varint,3,opt,name=write_workers,json=writeWorkers,proto3" json:"write_workers,omitempty"`
	// list of sync strategies
	Config []*SyncConfig `protobuf:"bytes,4,rep,name=config,proto3" json:"config,omitempty"`
}

func (x *Sync) Reset() {
	*x = Sync{}
	mi := &file_data_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sync) ProtoMessage() {}

func (x *Sync) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sync.ProtoReflect.Descriptor instead.
func (*Sync) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{40}
}

func (x *Sync) GetValidate() bool {
	if x != nil {
		return x.Validate
	}
	return false
}

func (x *Sync) GetBuffer() int64 {
	if x != nil {
		return x.Buffer
	}
	return 0
}

func (x *Sync) GetWriteWorkers() int64 {
	if x != nil {
		return x.WriteWorkers
	}
	return 0
}

func (x *Sync) GetConfig() []*SyncConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type SyncConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sync routing name
	Name   string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Target *Target `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// paths to subscribe to
	Path []string `protobuf:"bytes,3,rep,name=path,proto3" json:"path,omitempty"`
	// gnmi only: mode, on-change, sample, or once
	Mode SyncMode `protobuf:"varint,4,opt,name=mode,proto3,enum=data.SyncMode" json:"mode,omitempty"`
	// interval for gNMI mode sample or once
	// as well for netconf
	Interval uint64 `protobuf:"varint,5,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *SyncConfig) Reset() {
	*x = SyncConfig{}
	mi := &file_data_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncConfig) ProtoMessage() {}

func (x *SyncConfig) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncConfig.ProtoReflect.Descriptor instead.
func (*SyncConfig) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{41}
}

func (x *SyncConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SyncConfig) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *SyncConfig) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *SyncConfig) GetMode() SyncMode {
	if x != nil {
		return x.Mode
	}
	return SyncMode_SM_ON_CHANGE
}

func (x *SyncConfig) GetInterval() uint64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// objects to subscribe to
	Path []*Path `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
	// data type config, state
	DataType DataType `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=schema.DataType" json:"data_type,omitempty"`
	// sample interval
	SampleInterval uint64 `protobuf:"varint,3,opt,name=sample_interval,json=sampleInterval,proto3" json:"sample_interval,omitempty"`
	// suppress redandant.. this is probably not needed
	SuppressRedundant bool `protobuf:"varint,4,opt,name=suppress_redundant,json=suppressRedundant,proto3" json:"suppress_redundant,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	mi := &file_data_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{42}
}

func (x *Subscription) GetPath() []*Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Subscription) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_ALL
}

func (x *Subscription) GetSampleInterval() uint64 {
	if x != nil {
		return x.SampleInterval
	}
	return 0
}

func (x *Subscription) GetSuppressRedundant() bool {
	if x != nil {
		return x.SuppressRedundant
	}
	return false
}

type Watch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// objects to watch, identified by a path.
	Path []*Path `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
	// data type config, state
	DataType DataType `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=schema.DataType" json:"data_type,omitempty"`
	// heartbeat interval after which the object
	// data is sent to the watcher even if it did not change.
	HeartbeatInterval uint64 `protobuf:"varint,3,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
}

func (x *Watch) Reset() {
	*x = Watch{}
	mi := &file_data_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Watch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Watch) ProtoMessage() {}

func (x *Watch) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Watch.ProtoReflect.Descriptor instead.
func (*Watch) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{43}
}

func (x *Watch) GetPath() []*Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Watch) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_ALL
}

func (x *Watch) GetHeartbeatInterval() uint64 {
	if x != nil {
		return x.HeartbeatInterval
	}
	return 0
}

type Intent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// intent name
	Intent string `protobuf:"bytes,1,opt,name=intent,proto3" json:"intent,omitempty"`
	// intent priority
	Priority int32 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	// list of updates
	Update []*Update `protobuf:"bytes,3,rep,name=update,proto3" json:"update,omitempty"`
}

func (x *Intent) Reset() {
	*x = Intent{}
	mi := &file_data_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Intent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Intent) ProtoMessage() {}

func (x *Intent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Intent.ProtoReflect.Descriptor instead.
func (*Intent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{44}
}

func (x *Intent) GetIntent() string {
	if x != nil {
		return x.Intent
	}
	return ""
}

func (x *Intent) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Intent) GetUpdate() []*Update {
	if x != nil {
		return x.Update
	}
	return nil
}

type BlameConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// datastore name
	DatastoreName   string `protobuf:"bytes,1,opt,name=datastore_name,json=datastoreName,proto3" json:"datastore_name,omitempty"`
	IncludeDefaults bool   `protobuf:"varint,5,opt,name=include_defaults,json=includeDefaults,proto3" json:"include_defaults,omitempty"`
}

func (x *BlameConfigRequest) Reset() {
	*x = BlameConfigRequest{}
	mi := &file_data_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlameConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlameConfigRequest) ProtoMessage() {}

func (x *BlameConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlameConfigRequest.ProtoReflect.Descriptor instead.
func (*BlameConfigRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{45}
}

func (x *BlameConfigRequest) GetDatastoreName() string {
	if x != nil {
		return x.DatastoreName
	}
	return ""
}

func (x *BlameConfigRequest) GetIncludeDefaults() bool {
	if x != nil {
		return x.IncludeDefaults
	}
	return false
}

type BlameConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigTree *BlameTreeElement `protobuf:"bytes,1,opt,name=config_tree,json=configTree,proto3" json:"config_tree,omitempty"`
}

func (x *BlameConfigResponse) Reset() {
	*x = BlameConfigResponse{}
	mi := &file_data_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlameConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlameConfigResponse) ProtoMessage() {}

func (x *BlameConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlameConfigResponse.ProtoReflect.Descriptor instead.
func (*BlameConfigResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{46}
}

func (x *BlameConfigResponse) GetConfigTree() *BlameTreeElement {
	if x != nil {
		return x.ConfigTree
	}
	return nil
}

type BlameTreeElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Owner  string              `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Value  *TypedValue         `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Childs []*BlameTreeElement `protobuf:"bytes,10,rep,name=childs,proto3" json:"childs,omitempty"`
}

func (x *BlameTreeElement) Reset() {
	*x = BlameTreeElement{}
	mi := &file_data_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlameTreeElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlameTreeElement) ProtoMessage() {}

func (x *BlameTreeElement) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlameTreeElement.ProtoReflect.Descriptor instead.
func (*BlameTreeElement) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{47}
}

func (x *BlameTreeElement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlameTreeElement) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *BlameTreeElement) GetValue() *TypedValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *BlameTreeElement) GetChilds() []*BlameTreeElement {
	if x != nil {
		return x.Childs
	}
	return nil
}

var File_data_proto protoreflect.FileDescriptor

var file_data_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x20,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x2d, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x49, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc7, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x22, 0x7b, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x16, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x24, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x22, 0xad, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x24, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x1e, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63,
	0x22, 0x19, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xa6, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x24, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x42, 0x08, 0x0a, 0x06,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x24, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f,
	0x72, 0x70, 0x68, 0x61, 0x6e, 0x22, 0xa5, 0x02, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x07,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x5e, 0x0a,
	0x0c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a,
	0x1c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x22, 0x68, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3a, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xb1, 0x02, 0x0a, 0x16, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x52, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x6d, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0f, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x9f, 0x05, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x12, 0x19, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x1b, 0x0a,
	0x08, 0x75, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x08, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x08, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x36, 0x34, 0x48, 0x00, 0x52, 0x0a, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0a, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x09, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x0c, 0x6c, 0x65,
	0x61, 0x66, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x66, 0x6c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x6e, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6e, 0x79,
	0x56, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x65, 0x74, 0x66, 0x5f, 0x76, 0x61,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x49,
	0x65, 0x74, 0x66, 0x56, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x69, 0x69, 0x5f,
	0x76, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x61, 0x73, 0x63,
	0x69, 0x69, 0x56, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x12,
	0x3c, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x72, 0x65, 0x66, 0x5f, 0x76,
	0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x0e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x72, 0x65, 0x66, 0x56, 0x61, 0x6c, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x0b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2c,
	0x0a, 0x02, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x70, 0x22, 0x3d, 0x0a, 0x09,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x22, 0x78, 0x0a, 0x0c, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x06, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x51, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x41, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x0b, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x63, 0x6f,
	0x6e, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x4e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x75, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x22, 0x29, 0x0a, 0x0b, 0x47, 0x6e, 0x6d, 0x69,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0xef, 0x02, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x1b, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x4c, 0x53, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x33, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x6e, 0x6d,
	0x69, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x08, 0x67, 0x6e, 0x6d, 0x69,
	0x4f, 0x70, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x5f,
	0x6f, 0x70, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4e, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x00, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x4f, 0x70, 0x74, 0x73, 0x12,
	0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5c, 0x0a, 0x03, 0x54, 0x4c, 0x53, 0x12, 0x0e, 0x0a, 0x02,
	0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x22, 0x5b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x89, 0x01, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x9a, 0x01, 0x0a,
	0x0a, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64,
	0x61, 0x6e, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x20, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x2d, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x62, 0x0a,
	0x06, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x66, 0x0a, 0x12, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x13, 0x42, 0x6c, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x6c, 0x61,
	0x6d, 0x65, 0x54, 0x72, 0x65, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x65, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x42, 0x6c,
	0x61, 0x6d, 0x65, 0x54, 0x72, 0x65, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x06, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73,
	0x2a, 0x6d, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x4a, 0x53, 0x4f, 0x4e,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x45, 0x54, 0x46, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x58, 0x4d, 0x4c, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10, 0x03, 0x2a,
	0x4b, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x04, 0x2a, 0x63, 0x0a, 0x0f,
	0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0x04, 0x2a, 0x3a, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x45, 0x54, 0x46,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10, 0x03, 0x2a, 0x3d, 0x0a,
	0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x3b, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x2a, 0x44, 0x0a, 0x08, 0x53, 0x79, 0x6e,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4d, 0x5f, 0x4f, 0x4e, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4d, 0x5f, 0x53, 0x41,
	0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4d, 0x5f, 0x4f, 0x4e, 0x43,
	0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4d, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x03, 0x32,
	0xcc, 0x06, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x48,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4b, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x12, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x1e, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x0b, 0x42, 0x6c,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x6c, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x11,
	0x5a, 0x0f, 0x2e, 0x3b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_data_proto_rawDescOnce sync.Once
	file_data_proto_rawDescData = file_data_proto_rawDesc
)

func file_data_proto_rawDescGZIP() []byte {
	file_data_proto_rawDescOnce.Do(func() {
		file_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_proto_rawDescData)
	})
	return file_data_proto_rawDescData
}

var file_data_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_data_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_data_proto_goTypes = []any{
	(Format)(0),                          // 0: data.Format
	(DeviationEvent)(0),                  // 1: data.DeviationEvent
	(DeviationReason)(0),                 // 2: data.DeviationReason
	(Encoding)(0),                        // 3: data.Encoding
	(TargetStatus)(0),                    // 4: data.TargetStatus
	(CommitCandidate)(0),                 // 5: data.CommitCandidate
	(SyncMode)(0),                        // 6: data.SyncMode
	(UpdateResult_Operation)(0),          // 7: data.UpdateResult.Operation
	(*GetDataRequest)(nil),               // 8: data.GetDataRequest
	(*GetDataResponse)(nil),              // 9: data.GetDataResponse
	(*SetDataRequest)(nil),               // 10: data.SetDataRequest
	(*SetDataResponse)(nil),              // 11: data.SetDataResponse
	(*ListDataStoreRequest)(nil),         // 12: data.ListDataStoreRequest
	(*ListDataStoreResponse)(nil),        // 13: data.ListDataStoreResponse
	(*GetDataStoreRequest)(nil),          // 14: data.GetDataStoreRequest
	(*GetDataStoreResponse)(nil),         // 15: data.GetDataStoreResponse
	(*CreateDataStoreRequest)(nil),       // 16: data.CreateDataStoreRequest
	(*CreateDataStoreResponse)(nil),      // 17: data.CreateDataStoreResponse
	(*DeleteDataStoreRequest)(nil),       // 18: data.DeleteDataStoreRequest
	(*DeleteDataStoreResponse)(nil),      // 19: data.DeleteDataStoreResponse
	(*GetIntentRequest)(nil),             // 20: data.GetIntentRequest
	(*GetIntentResponse)(nil),            // 21: data.GetIntentResponse
	(*TransactionSetRequest)(nil),        // 22: data.TransactionSetRequest
	(*TransactionIntent)(nil),            // 23: data.TransactionIntent
	(*TransactionSetResponse)(nil),       // 24: data.TransactionSetResponse
	(*TransactionSetResponseIntent)(nil), // 25: data.TransactionSetResponseIntent
	(*TransactionCancelRequest)(nil),     // 26: data.TransactionCancelRequest
	(*TransactionCancelResponse)(nil),    // 27: data.TransactionCancelResponse
	(*TransactionConfirmRequest)(nil),    // 28: data.TransactionConfirmRequest
	(*TransactionConfirmResponse)(nil),   // 29: data.TransactionConfirmResponse
	(*ListIntentRequest)(nil),            // 30: data.ListIntentRequest
	(*ListIntentResponse)(nil),           // 31: data.ListIntentResponse
	(*WatchDeviationRequest)(nil),        // 32: data.WatchDeviationRequest
	(*WatchDeviationResponse)(nil),       // 33: data.WatchDeviationResponse
	(*Update)(nil),                       // 34: data.Update
	(*DiffUpdate)(nil),                   // 35: data.DiffUpdate
	(*TypedValue)(nil),                   // 36: data.TypedValue
	(*IdentityRef)(nil),                  // 37: data.IdentityRef
	(*UpdateResult)(nil),                 // 38: data.UpdateResult
	(*Notification)(nil),                 // 39: data.Notification
	(*DataStore)(nil),                    // 40: data.DataStore
	(*Decimal64)(nil),                    // 41: data.Decimal64
	(*ScalarArray)(nil),                  // 42: data.ScalarArray
	(*NetconfOptions)(nil),               // 43: data.NetconfOptions
	(*GnmiOptions)(nil),                  // 44: data.GnmiOptions
	(*Target)(nil),                       // 45: data.Target
	(*TLS)(nil),                          // 46: data.TLS
	(*Credentials)(nil),                  // 47: data.Credentials
	(*Sync)(nil),                         // 48: data.Sync
	(*SyncConfig)(nil),                   // 49: data.SyncConfig
	(*Subscription)(nil),                 // 50: data.Subscription
	(*Watch)(nil),                        // 51: data.Watch
	(*Intent)(nil),                       // 52: data.Intent
	(*BlameConfigRequest)(nil),           // 53: data.BlameConfigRequest
	(*BlameConfigResponse)(nil),          // 54: data.BlameConfigResponse
	(*BlameTreeElement)(nil),             // 55: data.BlameTreeElement
	nil,                                  // 56: data.TransactionSetResponse.IntentsEntry
	(*Path)(nil),                         // 57: schema.Path
	(DataType)(0),                        // 58: schema.DataType
	(*Schema)(nil),                       // 59: schema.Schema
	(*anypb.Any)(nil),                    // 60: google.protobuf.Any
	(*emptypb.Empty)(nil),                // 61: google.protobuf.Empty
}
var file_data_proto_depIdxs = []int32{
	40, // 0: data.GetDataRequest.datastore:type_name -> data.DataStore
	57, // 1: data.GetDataRequest.path:type_name -> schema.Path
	58, // 2: data.GetDataRequest.data_type:type_name -> schema.DataType
	3,  // 3: data.GetDataRequest.encoding:type_name -> data.Encoding
	39, // 4: data.GetDataResponse.notification:type_name -> data.Notification
	40, // 5: data.SetDataRequest.datastore:type_name -> data.DataStore
	34, // 6: data.SetDataRequest.update:type_name -> data.Update
	34, // 7: data.SetDataRequest.replace:type_name -> data.Update
	57, // 8: data.SetDataRequest.delete:type_name -> schema.Path
	38, // 9: data.SetDataResponse.response:type_name -> data.UpdateResult
	15, // 10: data.ListDataStoreResponse.datastores:type_name -> data.GetDataStoreResponse
	59, // 11: data.GetDataStoreResponse.schema:type_name -> schema.Schema
	45, // 12: data.GetDataStoreResponse.target:type_name -> data.Target
	59, // 13: data.CreateDataStoreRequest.schema:type_name -> schema.Schema
	45, // 14: data.CreateDataStoreRequest.target:type_name -> data.Target
	48, // 15: data.CreateDataStoreRequest.sync:type_name -> data.Sync
	0,  // 16: data.GetIntentRequest.format:type_name -> data.Format
	0,  // 17: data.GetIntentResponse.format:type_name -> data.Format
	52, // 18: data.GetIntentResponse.proto:type_name -> data.Intent
	23, // 19: data.TransactionSetRequest.intents:type_name -> data.TransactionIntent
	23, // 20: data.TransactionSetRequest.replace_intent:type_name -> data.TransactionIntent
	34, // 21: data.TransactionIntent.update:type_name -> data.Update
	34, // 22: data.TransactionSetResponse.update:type_name -> data.Update
	57, // 23: data.TransactionSetResponse.delete:type_name -> schema.Path
	56, // 24: data.TransactionSetResponse.intents:type_name -> data.TransactionSetResponse.IntentsEntry
	1,  // 25: data.WatchDeviationResponse.event:type_name -> data.DeviationEvent
	2,  // 26: data.WatchDeviationResponse.reason:type_name -> data.DeviationReason
	57, // 27: data.WatchDeviationResponse.path:type_name -> schema.Path
	36, // 28: data.WatchDeviationResponse.expected_value:type_name -> data.TypedValue
	36, // 29: data.WatchDeviationResponse.current_value:type_name -> data.TypedValue
	57, // 30: data.Update.path:type_name -> schema.Path
	36, // 31: data.Update.value:type_name -> data.TypedValue
	57, // 32: data.DiffUpdate.path:type_name -> schema.Path
	36, // 33: data.DiffUpdate.main_value:type_name -> data.TypedValue
	36, // 34: data.DiffUpdate.candidate_value:type_name -> data.TypedValue
	41, // 35: data.TypedValue.decimal_val:type_name -> data.Decimal64
	42, // 36: data.TypedValue.leaflist_val:type_name -> data.ScalarArray
	60, // 37: data.TypedValue.any_val:type_name -> google.protobuf.Any
	61, // 38: data.TypedValue.empty_val:type_name -> google.protobuf.Empty
	37, // 39: data.TypedValue.identityref_val:type_name -> data.IdentityRef
	57, // 40: data.UpdateResult.path:type_name -> schema.Path
	7,  // 41: data.UpdateResult.op:type_name -> data.UpdateResult.Operation
	34, // 42: data.Notification.update:type_name -> data.Update
	57, // 43: data.Notification.delete:type_name -> schema.Path
	36, // 44: data.ScalarArray.element:type_name -> data.TypedValue
	5,  // 45: data.NetconfOptions.commit_candidate:type_name -> data.CommitCandidate
	46, // 46: data.Target.tls:type_name -> data.TLS
	47, // 47: data.Target.credentials:type_name -> data.Credentials
	44, // 48: data.Target.gnmi_opts:type_name -> data.GnmiOptions
	43, // 49: data.Target.netconf_opts:type_name -> data.NetconfOptions
	4,  // 50: data.Target.status:type_name -> data.TargetStatus
	49, // 51: data.Sync.config:type_name -> data.SyncConfig
	45, // 52: data.SyncConfig.target:type_name -> data.Target
	6,  // 53: data.SyncConfig.mode:type_name -> data.SyncMode
	57, // 54: data.Subscription.path:type_name -> schema.Path
	58, // 55: data.Subscription.data_type:type_name -> schema.DataType
	57, // 56: data.Watch.path:type_name -> schema.Path
	58, // 57: data.Watch.data_type:type_name -> schema.DataType
	34, // 58: data.Intent.update:type_name -> data.Update
	55, // 59: data.BlameConfigResponse.config_tree:type_name -> data.BlameTreeElement
	36, // 60: data.BlameTreeElement.value:type_name -> data.TypedValue
	55, // 61: data.BlameTreeElement.childs:type_name -> data.BlameTreeElement
	25, // 62: data.TransactionSetResponse.IntentsEntry.value:type_name -> data.TransactionSetResponseIntent
	12, // 63: data.DataServer.ListDataStore:input_type -> data.ListDataStoreRequest
	14, // 64: data.DataServer.GetDataStore:input_type -> data.GetDataStoreRequest
	16, // 65: data.DataServer.CreateDataStore:input_type -> data.CreateDataStoreRequest
	18, // 66: data.DataServer.DeleteDataStore:input_type -> data.DeleteDataStoreRequest
	22, // 67: data.DataServer.TransactionSet:input_type -> data.TransactionSetRequest
	28, // 68: data.DataServer.TransactionConfirm:input_type -> data.TransactionConfirmRequest
	26, // 69: data.DataServer.TransactionCancel:input_type -> data.TransactionCancelRequest
	30, // 70: data.DataServer.ListIntent:input_type -> data.ListIntentRequest
	20, // 71: data.DataServer.GetIntent:input_type -> data.GetIntentRequest
	32, // 72: data.DataServer.WatchDeviations:input_type -> data.WatchDeviationRequest
	53, // 73: data.DataServer.BlameConfig:input_type -> data.BlameConfigRequest
	13, // 74: data.DataServer.ListDataStore:output_type -> data.ListDataStoreResponse
	15, // 75: data.DataServer.GetDataStore:output_type -> data.GetDataStoreResponse
	17, // 76: data.DataServer.CreateDataStore:output_type -> data.CreateDataStoreResponse
	19, // 77: data.DataServer.DeleteDataStore:output_type -> data.DeleteDataStoreResponse
	24, // 78: data.DataServer.TransactionSet:output_type -> data.TransactionSetResponse
	29, // 79: data.DataServer.TransactionConfirm:output_type -> data.TransactionConfirmResponse
	27, // 80: data.DataServer.TransactionCancel:output_type -> data.TransactionCancelResponse
	31, // 81: data.DataServer.ListIntent:output_type -> data.ListIntentResponse
	21, // 82: data.DataServer.GetIntent:output_type -> data.GetIntentResponse
	33, // 83: data.DataServer.WatchDeviations:output_type -> data.WatchDeviationResponse
	54, // 84: data.DataServer.BlameConfig:output_type -> data.BlameConfigResponse
	74, // [74:85] is the sub-list for method output_type
	63, // [63:74] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_data_proto_init() }
func file_data_proto_init() {
	if File_data_proto != nil {
		return
	}
	file_schema_proto_init()
	file_data_proto_msgTypes[13].OneofWrappers = []any{
		(*GetIntentResponse_Proto)(nil),
		(*GetIntentResponse_Blob)(nil),
	}
	file_data_proto_msgTypes[14].OneofWrappers = []any{}
	file_data_proto_msgTypes[28].OneofWrappers = []any{
		(*TypedValue_StringVal)(nil),
		(*TypedValue_IntVal)(nil),
		(*TypedValue_UintVal)(nil),
		(*TypedValue_BoolVal)(nil),
		(*TypedValue_BytesVal)(nil),
		(*TypedValue_FloatVal)(nil),
		(*TypedValue_DecimalVal)(nil),
		(*TypedValue_DoubleVal)(nil),
		(*TypedValue_LeaflistVal)(nil),
		(*TypedValue_AnyVal)(nil),
		(*TypedValue_JsonVal)(nil),
		(*TypedValue_JsonIetfVal)(nil),
		(*TypedValue_AsciiVal)(nil),
		(*TypedValue_ProtoBytes)(nil),
		(*TypedValue_EmptyVal)(nil),
		(*TypedValue_IdentityrefVal)(nil),
	}
	file_data_proto_msgTypes[37].OneofWrappers = []any{
		(*Target_GnmiOpts)(nil),
		(*Target_NetconfOpts)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_data_proto_goTypes,
		DependencyIndexes: file_data_proto_depIdxs,
		EnumInfos:         file_data_proto_enumTypes,
		MessageInfos:      file_data_proto_msgTypes,
	}.Build()
	File_data_proto = out.File
	file_data_proto_rawDesc = nil
	file_data_proto_goTypes = nil
	file_data_proto_depIdxs = nil
}
