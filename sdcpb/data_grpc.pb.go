// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.0
// source: data.proto

package schema_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataServerClient is the client API for DataServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServerClient interface {
	// datastore
	ListDataStore(ctx context.Context, in *ListDataStoreRequest, opts ...grpc.CallOption) (*ListDataStoreResponse, error)
	// return a datastore details
	GetDataStore(ctx context.Context, in *GetDataStoreRequest, opts ...grpc.CallOption) (*GetDataStoreResponse, error)
	// creates a new datastore, either a MAIN or a CANDIDATE datastore
	CreateDataStore(ctx context.Context, in *CreateDataStoreRequest, opts ...grpc.CallOption) (*CreateDataStoreResponse, error)
	// deletes a datastore, either a MAIN or a CANDIDATE datastore
	DeleteDataStore(ctx context.Context, in *DeleteDataStoreRequest, opts ...grpc.CallOption) (*DeleteDataStoreResponse, error)
	// Start a transaction
	TransactionSet(ctx context.Context, in *TransactionSetRequest, opts ...grpc.CallOption) (*TransactionSetResponse, error)
	// Confirm the transaction
	TransactionConfirm(ctx context.Context, in *TransactionConfirmRequest, opts ...grpc.CallOption) (*TransactionConfirmResponse, error)
	// Cancel and thereby rollback the transaction
	TransactionCancel(ctx context.Context, in *TransactionCancelRequest, opts ...grpc.CallOption) (*TransactionCancelResponse, error)
	// list intents for a given datastore (name and priority)
	ListIntent(ctx context.Context, in *ListIntentRequest, opts ...grpc.CallOption) (*ListIntentResponse, error)
	GetIntent(ctx context.Context, in *GetIntentRequest, opts ...grpc.CallOption) (*GetIntentResponse, error)
	WatchDeviations(ctx context.Context, in *WatchDeviationRequest, opts ...grpc.CallOption) (DataServer_WatchDeviationsClient, error)
	BlameConfig(ctx context.Context, in *BlameConfigRequest, opts ...grpc.CallOption) (*BlameConfigResponse, error)
}

type dataServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServerClient(cc grpc.ClientConnInterface) DataServerClient {
	return &dataServerClient{cc}
}

func (c *dataServerClient) ListDataStore(ctx context.Context, in *ListDataStoreRequest, opts ...grpc.CallOption) (*ListDataStoreResponse, error) {
	out := new(ListDataStoreResponse)
	err := c.cc.Invoke(ctx, "/data.DataServer/ListDataStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) GetDataStore(ctx context.Context, in *GetDataStoreRequest, opts ...grpc.CallOption) (*GetDataStoreResponse, error) {
	out := new(GetDataStoreResponse)
	err := c.cc.Invoke(ctx, "/data.DataServer/GetDataStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) CreateDataStore(ctx context.Context, in *CreateDataStoreRequest, opts ...grpc.CallOption) (*CreateDataStoreResponse, error) {
	out := new(CreateDataStoreResponse)
	err := c.cc.Invoke(ctx, "/data.DataServer/CreateDataStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) DeleteDataStore(ctx context.Context, in *DeleteDataStoreRequest, opts ...grpc.CallOption) (*DeleteDataStoreResponse, error) {
	out := new(DeleteDataStoreResponse)
	err := c.cc.Invoke(ctx, "/data.DataServer/DeleteDataStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) TransactionSet(ctx context.Context, in *TransactionSetRequest, opts ...grpc.CallOption) (*TransactionSetResponse, error) {
	out := new(TransactionSetResponse)
	err := c.cc.Invoke(ctx, "/data.DataServer/TransactionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) TransactionConfirm(ctx context.Context, in *TransactionConfirmRequest, opts ...grpc.CallOption) (*TransactionConfirmResponse, error) {
	out := new(TransactionConfirmResponse)
	err := c.cc.Invoke(ctx, "/data.DataServer/TransactionConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) TransactionCancel(ctx context.Context, in *TransactionCancelRequest, opts ...grpc.CallOption) (*TransactionCancelResponse, error) {
	out := new(TransactionCancelResponse)
	err := c.cc.Invoke(ctx, "/data.DataServer/TransactionCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) ListIntent(ctx context.Context, in *ListIntentRequest, opts ...grpc.CallOption) (*ListIntentResponse, error) {
	out := new(ListIntentResponse)
	err := c.cc.Invoke(ctx, "/data.DataServer/ListIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) GetIntent(ctx context.Context, in *GetIntentRequest, opts ...grpc.CallOption) (*GetIntentResponse, error) {
	out := new(GetIntentResponse)
	err := c.cc.Invoke(ctx, "/data.DataServer/GetIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) WatchDeviations(ctx context.Context, in *WatchDeviationRequest, opts ...grpc.CallOption) (DataServer_WatchDeviationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataServer_ServiceDesc.Streams[0], "/data.DataServer/WatchDeviations", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServerWatchDeviationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataServer_WatchDeviationsClient interface {
	Recv() (*WatchDeviationResponse, error)
	grpc.ClientStream
}

type dataServerWatchDeviationsClient struct {
	grpc.ClientStream
}

func (x *dataServerWatchDeviationsClient) Recv() (*WatchDeviationResponse, error) {
	m := new(WatchDeviationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataServerClient) BlameConfig(ctx context.Context, in *BlameConfigRequest, opts ...grpc.CallOption) (*BlameConfigResponse, error) {
	out := new(BlameConfigResponse)
	err := c.cc.Invoke(ctx, "/data.DataServer/BlameConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServerServer is the server API for DataServer service.
// All implementations must embed UnimplementedDataServerServer
// for forward compatibility
type DataServerServer interface {
	// datastore
	ListDataStore(context.Context, *ListDataStoreRequest) (*ListDataStoreResponse, error)
	// return a datastore details
	GetDataStore(context.Context, *GetDataStoreRequest) (*GetDataStoreResponse, error)
	// creates a new datastore, either a MAIN or a CANDIDATE datastore
	CreateDataStore(context.Context, *CreateDataStoreRequest) (*CreateDataStoreResponse, error)
	// deletes a datastore, either a MAIN or a CANDIDATE datastore
	DeleteDataStore(context.Context, *DeleteDataStoreRequest) (*DeleteDataStoreResponse, error)
	// Start a transaction
	TransactionSet(context.Context, *TransactionSetRequest) (*TransactionSetResponse, error)
	// Confirm the transaction
	TransactionConfirm(context.Context, *TransactionConfirmRequest) (*TransactionConfirmResponse, error)
	// Cancel and thereby rollback the transaction
	TransactionCancel(context.Context, *TransactionCancelRequest) (*TransactionCancelResponse, error)
	// list intents for a given datastore (name and priority)
	ListIntent(context.Context, *ListIntentRequest) (*ListIntentResponse, error)
	GetIntent(context.Context, *GetIntentRequest) (*GetIntentResponse, error)
	WatchDeviations(*WatchDeviationRequest, DataServer_WatchDeviationsServer) error
	BlameConfig(context.Context, *BlameConfigRequest) (*BlameConfigResponse, error)
	mustEmbedUnimplementedDataServerServer()
}

// UnimplementedDataServerServer must be embedded to have forward compatible implementations.
type UnimplementedDataServerServer struct {
}

func (UnimplementedDataServerServer) ListDataStore(context.Context, *ListDataStoreRequest) (*ListDataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataStore not implemented")
}
func (UnimplementedDataServerServer) GetDataStore(context.Context, *GetDataStoreRequest) (*GetDataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataStore not implemented")
}
func (UnimplementedDataServerServer) CreateDataStore(context.Context, *CreateDataStoreRequest) (*CreateDataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataStore not implemented")
}
func (UnimplementedDataServerServer) DeleteDataStore(context.Context, *DeleteDataStoreRequest) (*DeleteDataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataStore not implemented")
}
func (UnimplementedDataServerServer) TransactionSet(context.Context, *TransactionSetRequest) (*TransactionSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionSet not implemented")
}
func (UnimplementedDataServerServer) TransactionConfirm(context.Context, *TransactionConfirmRequest) (*TransactionConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionConfirm not implemented")
}
func (UnimplementedDataServerServer) TransactionCancel(context.Context, *TransactionCancelRequest) (*TransactionCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionCancel not implemented")
}
func (UnimplementedDataServerServer) ListIntent(context.Context, *ListIntentRequest) (*ListIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntent not implemented")
}
func (UnimplementedDataServerServer) GetIntent(context.Context, *GetIntentRequest) (*GetIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntent not implemented")
}
func (UnimplementedDataServerServer) WatchDeviations(*WatchDeviationRequest, DataServer_WatchDeviationsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchDeviations not implemented")
}
func (UnimplementedDataServerServer) BlameConfig(context.Context, *BlameConfigRequest) (*BlameConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlameConfig not implemented")
}
func (UnimplementedDataServerServer) mustEmbedUnimplementedDataServerServer() {}

// UnsafeDataServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServerServer will
// result in compilation errors.
type UnsafeDataServerServer interface {
	mustEmbedUnimplementedDataServerServer()
}

func RegisterDataServerServer(s grpc.ServiceRegistrar, srv DataServerServer) {
	s.RegisterService(&DataServer_ServiceDesc, srv)
}

func _DataServer_ListDataStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).ListDataStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.DataServer/ListDataStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).ListDataStore(ctx, req.(*ListDataStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_GetDataStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).GetDataStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.DataServer/GetDataStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).GetDataStore(ctx, req.(*GetDataStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_CreateDataStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).CreateDataStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.DataServer/CreateDataStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).CreateDataStore(ctx, req.(*CreateDataStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_DeleteDataStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).DeleteDataStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.DataServer/DeleteDataStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).DeleteDataStore(ctx, req.(*DeleteDataStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_TransactionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).TransactionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.DataServer/TransactionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).TransactionSet(ctx, req.(*TransactionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_TransactionConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).TransactionConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.DataServer/TransactionConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).TransactionConfirm(ctx, req.(*TransactionConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_TransactionCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).TransactionCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.DataServer/TransactionCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).TransactionCancel(ctx, req.(*TransactionCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_ListIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).ListIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.DataServer/ListIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).ListIntent(ctx, req.(*ListIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_GetIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).GetIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.DataServer/GetIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).GetIntent(ctx, req.(*GetIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_WatchDeviations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchDeviationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServerServer).WatchDeviations(m, &dataServerWatchDeviationsServer{stream})
}

type DataServer_WatchDeviationsServer interface {
	Send(*WatchDeviationResponse) error
	grpc.ServerStream
}

type dataServerWatchDeviationsServer struct {
	grpc.ServerStream
}

func (x *dataServerWatchDeviationsServer) Send(m *WatchDeviationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataServer_BlameConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlameConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).BlameConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.DataServer/BlameConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).BlameConfig(ctx, req.(*BlameConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataServer_ServiceDesc is the grpc.ServiceDesc for DataServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data.DataServer",
	HandlerType: (*DataServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDataStore",
			Handler:    _DataServer_ListDataStore_Handler,
		},
		{
			MethodName: "GetDataStore",
			Handler:    _DataServer_GetDataStore_Handler,
		},
		{
			MethodName: "CreateDataStore",
			Handler:    _DataServer_CreateDataStore_Handler,
		},
		{
			MethodName: "DeleteDataStore",
			Handler:    _DataServer_DeleteDataStore_Handler,
		},
		{
			MethodName: "TransactionSet",
			Handler:    _DataServer_TransactionSet_Handler,
		},
		{
			MethodName: "TransactionConfirm",
			Handler:    _DataServer_TransactionConfirm_Handler,
		},
		{
			MethodName: "TransactionCancel",
			Handler:    _DataServer_TransactionCancel_Handler,
		},
		{
			MethodName: "ListIntent",
			Handler:    _DataServer_ListIntent_Handler,
		},
		{
			MethodName: "GetIntent",
			Handler:    _DataServer_GetIntent_Handler,
		},
		{
			MethodName: "BlameConfig",
			Handler:    _DataServer_BlameConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchDeviations",
			Handler:       _DataServer_WatchDeviations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data.proto",
}
