// Copyright 2024 Nokia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: data.proto

package schema_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataServer_ListDataStore_FullMethodName      = "/data.DataServer/ListDataStore"
	DataServer_GetDataStore_FullMethodName       = "/data.DataServer/GetDataStore"
	DataServer_CreateDataStore_FullMethodName    = "/data.DataServer/CreateDataStore"
	DataServer_DeleteDataStore_FullMethodName    = "/data.DataServer/DeleteDataStore"
	DataServer_TransactionSet_FullMethodName     = "/data.DataServer/TransactionSet"
	DataServer_TransactionConfirm_FullMethodName = "/data.DataServer/TransactionConfirm"
	DataServer_TransactionCancel_FullMethodName  = "/data.DataServer/TransactionCancel"
	DataServer_ListIntent_FullMethodName         = "/data.DataServer/ListIntent"
	DataServer_GetIntent_FullMethodName          = "/data.DataServer/GetIntent"
	DataServer_WatchDeviations_FullMethodName    = "/data.DataServer/WatchDeviations"
)

// DataServerClient is the client API for DataServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServerClient interface {
	// datastore
	ListDataStore(ctx context.Context, in *ListDataStoreRequest, opts ...grpc.CallOption) (*ListDataStoreResponse, error)
	// return a datastore details
	GetDataStore(ctx context.Context, in *GetDataStoreRequest, opts ...grpc.CallOption) (*GetDataStoreResponse, error)
	// creates a new datastore, either a MAIN or a CANDIDATE datastore
	CreateDataStore(ctx context.Context, in *CreateDataStoreRequest, opts ...grpc.CallOption) (*CreateDataStoreResponse, error)
	// deletes a datastore, either a MAIN or a CANDIDATE datastore
	DeleteDataStore(ctx context.Context, in *DeleteDataStoreRequest, opts ...grpc.CallOption) (*DeleteDataStoreResponse, error)
	// Start a transaction
	TransactionSet(ctx context.Context, in *TransactionSetRequest, opts ...grpc.CallOption) (*TransactionSetResponse, error)
	// Confirm the transaction
	TransactionConfirm(ctx context.Context, in *TransactionConfirmRequest, opts ...grpc.CallOption) (*TransactionConfirmResponse, error)
	// Cancel and thereby rollback the transaction
	TransactionCancel(ctx context.Context, in *TransactionCancelRequest, opts ...grpc.CallOption) (*TransactionCancelResponse, error)
	// list intents for a given datastore (name and priority)
	ListIntent(ctx context.Context, in *ListIntentRequest, opts ...grpc.CallOption) (*ListIntentResponse, error)
	GetIntent(ctx context.Context, in *GetIntentRequest, opts ...grpc.CallOption) (*GetIntentResponse, error)
	WatchDeviations(ctx context.Context, in *WatchDeviationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchDeviationResponse], error)
}

type dataServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServerClient(cc grpc.ClientConnInterface) DataServerClient {
	return &dataServerClient{cc}
}

func (c *dataServerClient) ListDataStore(ctx context.Context, in *ListDataStoreRequest, opts ...grpc.CallOption) (*ListDataStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDataStoreResponse)
	err := c.cc.Invoke(ctx, DataServer_ListDataStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) GetDataStore(ctx context.Context, in *GetDataStoreRequest, opts ...grpc.CallOption) (*GetDataStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataStoreResponse)
	err := c.cc.Invoke(ctx, DataServer_GetDataStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) CreateDataStore(ctx context.Context, in *CreateDataStoreRequest, opts ...grpc.CallOption) (*CreateDataStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDataStoreResponse)
	err := c.cc.Invoke(ctx, DataServer_CreateDataStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) DeleteDataStore(ctx context.Context, in *DeleteDataStoreRequest, opts ...grpc.CallOption) (*DeleteDataStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDataStoreResponse)
	err := c.cc.Invoke(ctx, DataServer_DeleteDataStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) TransactionSet(ctx context.Context, in *TransactionSetRequest, opts ...grpc.CallOption) (*TransactionSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionSetResponse)
	err := c.cc.Invoke(ctx, DataServer_TransactionSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) TransactionConfirm(ctx context.Context, in *TransactionConfirmRequest, opts ...grpc.CallOption) (*TransactionConfirmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionConfirmResponse)
	err := c.cc.Invoke(ctx, DataServer_TransactionConfirm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) TransactionCancel(ctx context.Context, in *TransactionCancelRequest, opts ...grpc.CallOption) (*TransactionCancelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionCancelResponse)
	err := c.cc.Invoke(ctx, DataServer_TransactionCancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) ListIntent(ctx context.Context, in *ListIntentRequest, opts ...grpc.CallOption) (*ListIntentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIntentResponse)
	err := c.cc.Invoke(ctx, DataServer_ListIntent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) GetIntent(ctx context.Context, in *GetIntentRequest, opts ...grpc.CallOption) (*GetIntentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIntentResponse)
	err := c.cc.Invoke(ctx, DataServer_GetIntent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) WatchDeviations(ctx context.Context, in *WatchDeviationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchDeviationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataServer_ServiceDesc.Streams[0], DataServer_WatchDeviations_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchDeviationRequest, WatchDeviationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataServer_WatchDeviationsClient = grpc.ServerStreamingClient[WatchDeviationResponse]

// DataServerServer is the server API for DataServer service.
// All implementations must embed UnimplementedDataServerServer
// for forward compatibility.
type DataServerServer interface {
	// datastore
	ListDataStore(context.Context, *ListDataStoreRequest) (*ListDataStoreResponse, error)
	// return a datastore details
	GetDataStore(context.Context, *GetDataStoreRequest) (*GetDataStoreResponse, error)
	// creates a new datastore, either a MAIN or a CANDIDATE datastore
	CreateDataStore(context.Context, *CreateDataStoreRequest) (*CreateDataStoreResponse, error)
	// deletes a datastore, either a MAIN or a CANDIDATE datastore
	DeleteDataStore(context.Context, *DeleteDataStoreRequest) (*DeleteDataStoreResponse, error)
	// Start a transaction
	TransactionSet(context.Context, *TransactionSetRequest) (*TransactionSetResponse, error)
	// Confirm the transaction
	TransactionConfirm(context.Context, *TransactionConfirmRequest) (*TransactionConfirmResponse, error)
	// Cancel and thereby rollback the transaction
	TransactionCancel(context.Context, *TransactionCancelRequest) (*TransactionCancelResponse, error)
	// list intents for a given datastore (name and priority)
	ListIntent(context.Context, *ListIntentRequest) (*ListIntentResponse, error)
	GetIntent(context.Context, *GetIntentRequest) (*GetIntentResponse, error)
	WatchDeviations(*WatchDeviationRequest, grpc.ServerStreamingServer[WatchDeviationResponse]) error
	mustEmbedUnimplementedDataServerServer()
}

// UnimplementedDataServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataServerServer struct{}

func (UnimplementedDataServerServer) ListDataStore(context.Context, *ListDataStoreRequest) (*ListDataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataStore not implemented")
}
func (UnimplementedDataServerServer) GetDataStore(context.Context, *GetDataStoreRequest) (*GetDataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataStore not implemented")
}
func (UnimplementedDataServerServer) CreateDataStore(context.Context, *CreateDataStoreRequest) (*CreateDataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataStore not implemented")
}
func (UnimplementedDataServerServer) DeleteDataStore(context.Context, *DeleteDataStoreRequest) (*DeleteDataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataStore not implemented")
}
func (UnimplementedDataServerServer) TransactionSet(context.Context, *TransactionSetRequest) (*TransactionSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionSet not implemented")
}
func (UnimplementedDataServerServer) TransactionConfirm(context.Context, *TransactionConfirmRequest) (*TransactionConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionConfirm not implemented")
}
func (UnimplementedDataServerServer) TransactionCancel(context.Context, *TransactionCancelRequest) (*TransactionCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionCancel not implemented")
}
func (UnimplementedDataServerServer) ListIntent(context.Context, *ListIntentRequest) (*ListIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntent not implemented")
}
func (UnimplementedDataServerServer) GetIntent(context.Context, *GetIntentRequest) (*GetIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntent not implemented")
}
func (UnimplementedDataServerServer) WatchDeviations(*WatchDeviationRequest, grpc.ServerStreamingServer[WatchDeviationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WatchDeviations not implemented")
}
func (UnimplementedDataServerServer) mustEmbedUnimplementedDataServerServer() {}
func (UnimplementedDataServerServer) testEmbeddedByValue()                    {}

// UnsafeDataServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServerServer will
// result in compilation errors.
type UnsafeDataServerServer interface {
	mustEmbedUnimplementedDataServerServer()
}

func RegisterDataServerServer(s grpc.ServiceRegistrar, srv DataServerServer) {
	// If the following call pancis, it indicates UnimplementedDataServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataServer_ServiceDesc, srv)
}

func _DataServer_ListDataStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).ListDataStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_ListDataStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).ListDataStore(ctx, req.(*ListDataStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_GetDataStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).GetDataStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_GetDataStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).GetDataStore(ctx, req.(*GetDataStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_CreateDataStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).CreateDataStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_CreateDataStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).CreateDataStore(ctx, req.(*CreateDataStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_DeleteDataStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).DeleteDataStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_DeleteDataStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).DeleteDataStore(ctx, req.(*DeleteDataStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_TransactionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).TransactionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_TransactionSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).TransactionSet(ctx, req.(*TransactionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_TransactionConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).TransactionConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_TransactionConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).TransactionConfirm(ctx, req.(*TransactionConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_TransactionCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).TransactionCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_TransactionCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).TransactionCancel(ctx, req.(*TransactionCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_ListIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).ListIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_ListIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).ListIntent(ctx, req.(*ListIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_GetIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).GetIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_GetIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).GetIntent(ctx, req.(*GetIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_WatchDeviations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchDeviationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServerServer).WatchDeviations(m, &grpc.GenericServerStream[WatchDeviationRequest, WatchDeviationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataServer_WatchDeviationsServer = grpc.ServerStreamingServer[WatchDeviationResponse]

// DataServer_ServiceDesc is the grpc.ServiceDesc for DataServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data.DataServer",
	HandlerType: (*DataServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDataStore",
			Handler:    _DataServer_ListDataStore_Handler,
		},
		{
			MethodName: "GetDataStore",
			Handler:    _DataServer_GetDataStore_Handler,
		},
		{
			MethodName: "CreateDataStore",
			Handler:    _DataServer_CreateDataStore_Handler,
		},
		{
			MethodName: "DeleteDataStore",
			Handler:    _DataServer_DeleteDataStore_Handler,
		},
		{
			MethodName: "TransactionSet",
			Handler:    _DataServer_TransactionSet_Handler,
		},
		{
			MethodName: "TransactionConfirm",
			Handler:    _DataServer_TransactionConfirm_Handler,
		},
		{
			MethodName: "TransactionCancel",
			Handler:    _DataServer_TransactionCancel_Handler,
		},
		{
			MethodName: "ListIntent",
			Handler:    _DataServer_ListIntent_Handler,
		},
		{
			MethodName: "GetIntent",
			Handler:    _DataServer_GetIntent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchDeviations",
			Handler:       _DataServer_WatchDeviations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data.proto",
}
